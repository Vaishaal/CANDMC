1586-534 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 24> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references A->(double).rns1.[($$CIV1 + (long long) (k1 - 1)) + (long long) lda * $$CIV0] = $$TVX.$$.swp00; with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references $$TVX.$$.swp00 = A->(double).rns1.[((long long) lda * $$CIV0 + (long long) IPIV->(int).rns0.[$$CIV1 + (long long) (k1 - 1)]) - 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references A->(double).rns1.[((long long) lda * $$CIV0 + (long long) IPIV->(int).rns0.[$$CIV1 + (long long) (k1 - 1)]) - 1ll] = A->(double).rns1.[($$CIV1 + (long long) (k1 - 1)) + (long long) lda * $$CIV0]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because it contains memory references ((char *)A + (8ll)*(($$CIV1 + (long long) (k1 - 1)) + (long long) lda * $$CIV0)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because it contains non-stride-one store references ((char *)A + (8ll)*(($$CIV1 + (long long) (k1 - 1)) + (long long) lda * $$CIV0)).
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 26> was not SIMD vectorized because it contains memory references ((char *)A + (8ll)*(((long long) lda * $$CIV0 + (long long) IPIV->(int).rns0.[$$CIV1 + (long long) (k1 - 1)]) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 26> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because it contains memory references ((char *)A + (8ll)*(((long long) lda * $$CIV0 + (long long) IPIV->(int).rns0.[$$CIV1 + (long long) (k1 - 1)]) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because it contains non-stride-one store references ((char *)A + (8ll)*(((long long) lda * $$CIV0 + (long long) IPIV->(int).rns0.[$$CIV1 + (long long) (k1 - 1)]) - 1ll)).
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
1586-535 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 40> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-540 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 40> was not SIMD vectorized because it contains memory references P2->(int).rns4.[$$CIV2] = P2_cpy->(int).rns6.[(long long) P1->(int).rns5.[$$CIV2]]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 41> was not SIMD vectorized because it contains memory references ((char *)P2_cpy + (4ll)*((long long) P1->(int).rns5.[$$CIV2])) with non-vectorizable strides.
1586-551 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 41> was not SIMD vectorized because it contains unsupported vector data types.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
1586-540 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 48> was not SIMD vectorized because it contains memory references tmp = P2->(int).rns8.[(long long) (P1->(int).rns7.[$$CIV3] - 1)]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 48> was not SIMD vectorized because it contains memory references P2->(int).rns8.[(long long) (P1->(int).rns7.[$$CIV3] - 1)] = P2->(int).rns8.[$$CIV3]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 49> was not SIMD vectorized because it contains memory references ((char *)P2 + (4ll)*((long long) (P1->(int).rns7.[$$CIV3] - 1))) with non-vectorizable strides.
1586-551 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 49> was not SIMD vectorized because it contains unsupported vector data types.
1586-551 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 51> was not SIMD vectorized because it contains unsupported vector data types.
1586-540 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 50> was not SIMD vectorized because it contains memory references ((char *)P2 + (4ll)*((long long) (P1->(int).rns7.[$$CIV3] - 1))) with non-vectorizable strides.
1586-551 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 50> was not SIMD vectorized because it contains unsupported vector data types.
1586-556 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 50> was not SIMD vectorized because it contains non-stride-one store references ((char *)P2 + (4ll)*((long long) (P1->(int).rns7.[$$CIV3] - 1))).
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
1586-534 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 57> was not SIMD vectorized because the loop is not the innermost loop.
1586-535 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 58> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 58> was not SIMD vectorized because it contains memory references B->(double).rns9.[(long long) nrow * $$CIV5 + $$CIV4] = A->(double).rns11.[(long long) (nrow * (int) $$CIV5 + P->(int).rns10.[$$CIV4])]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 59> was not SIMD vectorized because it contains memory references ((char *)A + (8ll)*((long long) (nrow * (int) $$CIV5 + P->(int).rns10.[$$CIV4]))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 59> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
1586-534 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 76> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 76> was not SIMD vectorized because it contains unsupported loop structure.
1586-538 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 78> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 78> was not SIMD vectorized because it contains control flow.
1586-538 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 77> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 77> was not SIMD vectorized because it contains control flow.
1586-537 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 73> was not SIMD vectorized because it contains operation in (long long) nbr + $$CIV7 which is not suitable for SIMD vectorization.
1586-551 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 73> was not SIMD vectorized because it contains unsupported vector data types.
1586-538 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 69> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 69> was not SIMD vectorized because it contains control flow.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"4">. Total number of the innermost loops SIMD vectorized <"0">.
1586-534 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 107> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 107> was not SIMD vectorized because it contains unsupported loop structure.
1586-538 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 109> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 109> was not SIMD vectorized because it contains control flow.
1586-538 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 108> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 108> was not SIMD vectorized because it contains control flow.
1586-538 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 96> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 96> was not SIMD vectorized because it contains control flow.
1586-550 (I) Loop (loop index 5) at /bgsys/drivers/toolchain/V1R2M4_base/gnu-linux/lib/gcc/powerpc64-bgq-linux/4.4.7/../../../../powerpc64-bgq-linux/include/c++/4.4.7/bits/stl_algobase.h <line 700> was not SIMD vectorized because it is not profitable to vectorize.
1586-551 (I) Loop (loop index 5) at /bgsys/drivers/toolchain/V1R2M4_base/gnu-linux/lib/gcc/powerpc64-bgq-linux/4.4.7/../../../../powerpc64-bgq-linux/include/c++/4.4.7/bits/stl_algobase.h <line 702> was not SIMD vectorized because it contains unsupported vector data types.
1586-538 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 96> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 96> was not SIMD vectorized because it contains control flow.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"5">. Total number of the innermost loops SIMD vectorized <"0">.
1586-539 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 121> was not SIMD vectorized because it contains function calls.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
1586-539 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 231> was not SIMD vectorized because it contains function calls.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 48> was not SIMD vectorized because it contains memory references tmp = P_out->(int).rns8.$$35[(long long) (((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns7.$$35[$$CIV3] - 1)]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 48> was not SIMD vectorized because it contains memory references P_out->(int).rns8.$$35[(long long) (((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns7.$$35[$$CIV3] - 1)] = P_out->(int).rns8.$$35[$$CIV3]; with non-vectorizable strides.
1586-551 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 51> was not SIMD vectorized because it contains unsupported vector data types.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 49> was not SIMD vectorized because it contains memory references ((char *)P_out + (4ll)*((long long) (((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns7.$$35[$$CIV3] - 1))) with non-vectorizable strides.
1586-551 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 49> was not SIMD vectorized because it contains unsupported vector data types.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 50> was not SIMD vectorized because it contains memory references ((char *)P_out + (4ll)*((long long) (((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns7.$$35[$$CIV3] - 1))) with non-vectorizable strides.
1586-551 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 50> was not SIMD vectorized because it contains unsupported vector data types.
1586-556 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 50> was not SIMD vectorized because it contains non-stride-one store references ((char *)P_out + (4ll)*((long long) (((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns7.$$35[$$CIV3] - 1))).
1586-539 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 231> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 231> was not SIMD vectorized because it contains function calls.
1586-534 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 24> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references R_out->(double).rns1.$$107$$34[((long long) (b * 2) * $$CIV0 + (long long) ((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns0.$$107$$34[$$CIV1]) - 1ll] = R_out->(double).rns1.$$107$$34[$$CIV1 + (long long) (b * 2) * $$CIV0]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references R_out->(double).rns1.$$107$$34[$$CIV1 + (long long) (b * 2) * $$CIV0] = $$TVX.$$.swp11; with non-vectorizable strides.
1586-540 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references $$TVX.$$.swp11 = R_out->(double).rns1.$$107$$34[((long long) (b * 2) * $$CIV0 + (long long) ((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns0.$$107$$34[$$CIV1]) - 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because it contains memory references ((char *)R_out + (8ll)*(((long long) (b * 2) * $$CIV0 + (long long) ((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns0.$$107$$34[$$CIV1]) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because it contains non-stride-one store references ((char *)R_out + (8ll)*(((long long) (b * 2) * $$CIV0 + (long long) ((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns0.$$107$$34[$$CIV1]) - 1ll)).
1586-540 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because it contains memory references ((char *)R_out + (8ll)*($$CIV1 + (long long) (b * 2) * $$CIV0)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because it contains non-stride-one store references ((char *)R_out + (8ll)*($$CIV1 + (long long) (b * 2) * $$CIV0)).
1586-540 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 26> was not SIMD vectorized because it contains memory references ((char *)R_out + (8ll)*(((long long) (b * 2) * $$CIV0 + (long long) ((char *)P_out  + (long long) (b * 2) * 4ll)->(int).rns0.$$107$$34[$$CIV1]) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 26> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-539 (I) Loop (loop index 7) at tnmt_pvt.cxx <line 121> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 9) at tnmt_pvt.cxx <line 121> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 10) at tnmt_pvt.cxx <line 231> was not SIMD vectorized because it contains function calls.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"6">. Total number of the innermost loops SIMD vectorized <"0">.
1586-534 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 473> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 538> was not SIMD vectorized because it contains memory references ((char *)buffer  + (long long) (npiv * ncol) * 8ll)->(double).rns37.[$$CIVF + (long long) npiv * $$CIVE] =  0.0000000000000000E+000; with non-vectorizable strides.
1586-540 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 539> was not SIMD vectorized because it contains memory references ((char *)((char *)buffer  + (long long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long long) npiv * $$CIVE)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 539> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 539> was not SIMD vectorized because it contains non-stride-one store references ((char *)((char *)buffer  + (long long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long long) npiv * $$CIVE)).
1586-535 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 529> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-540 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 529> was not SIMD vectorized because it contains memory references A->(double).rns38.[(long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank))] = buffer->(double).rns37.[(long long) r + (long long) npiv * $$CIVD]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 530> was not SIMD vectorized because it contains memory references ((char *)A + (8ll)*((long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 530> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 530> was not SIMD vectorized because it contains non-stride-one store references ((char *)A + (8ll)*((long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank)))).
1586-534 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 502> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 502> was not SIMD vectorized because it contains unsupported loop structure.
1586-538 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 504> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 504> was not SIMD vectorized because it contains control flow.
1586-535 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 495> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-540 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 495> was not SIMD vectorized because it contains memory references ((char *)buffer  + (long long) (npiv * ncol) * 8ll)->(double).rns37.[$$CIVF + (long long) npiv * $$CIVB] = A->(double).rns38.[(long long) lda_A * $$CIVB + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) b * (long long) myRank + (long long) idx_off))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 496> was not SIMD vectorized because it contains memory references ((char *)((char *)buffer  + (long long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long long) npiv * $$CIVB)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 496> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 496> was not SIMD vectorized because it contains non-stride-one store references ((char *)((char *)buffer  + (long long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long long) npiv * $$CIVB)).
1586-539 (I) Loop (loop index 7) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 8) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-534 (I) Loop (loop index 9) at tnmt_pvt.cxx <line 473> was not SIMD vectorized because the loop is not the innermost loop.
1586-535 (I) Loop (loop index 10) at tnmt_pvt.cxx <line 495> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-540 (I) Loop (loop index 10) at tnmt_pvt.cxx <line 495> was not SIMD vectorized because it contains memory references ((char *)buffer  + (long long) (npiv * ncol) * 8ll)->(double).rns37.[$$CIVF + (long long) npiv * $$CIVB] = A->(double).rns38.[(long long) lda_A * $$CIVB + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) b * (long long) myRank + (long long) idx_off))]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 10) at tnmt_pvt.cxx <line 496> was not SIMD vectorized because it contains memory references ((char *)((char *)buffer  + (long long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long long) npiv * $$CIVB)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 10) at tnmt_pvt.cxx <line 496> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 10) at tnmt_pvt.cxx <line 496> was not SIMD vectorized because it contains non-stride-one store references ((char *)((char *)buffer  + (long long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long long) npiv * $$CIVB)).
1586-535 (I) Loop (loop index 13) at tnmt_pvt.cxx <line 529> was not SIMD vectorized because the aliasing-induced dependence prevents SIMD vectorization.
1586-540 (I) Loop (loop index 13) at tnmt_pvt.cxx <line 529> was not SIMD vectorized because it contains memory references A->(double).rns38.[(long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank))] = buffer->(double).rns37.[$$CIVF + (long long) npiv * $$CIVD]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 13) at tnmt_pvt.cxx <line 530> was not SIMD vectorized because it contains memory references ((char *)A + (8ll)*((long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank)))) with non-vectorizable strides.
1586-554 (I) Loop (loop index 13) at tnmt_pvt.cxx <line 530> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 13) at tnmt_pvt.cxx <line 530> was not SIMD vectorized because it contains non-stride-one store references ((char *)A + (8ll)*((long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank)))).
1586-540 (I) Loop (loop index 14) at tnmt_pvt.cxx <line 538> was not SIMD vectorized because it contains memory references ((char *)buffer  + (long long) (npiv * ncol) * 8ll)->(double).rns37.[$$CIVF + (long long) npiv * $$CIVE] =  0.0000000000000000E+000; with non-vectorizable strides.
1586-540 (I) Loop (loop index 14) at tnmt_pvt.cxx <line 539> was not SIMD vectorized because it contains memory references ((char *)((char *)buffer  + (long long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long long) npiv * $$CIVE)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 14) at tnmt_pvt.cxx <line 539> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 14) at tnmt_pvt.cxx <line 539> was not SIMD vectorized because it contains non-stride-one store references ((char *)((char *)buffer  + (long long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long long) npiv * $$CIVE)).
1586-534 (I) Loop (loop index 15) at tnmt_pvt.cxx <line 473> was not SIMD vectorized because the loop is not the innermost loop.
1586-534 (I) Loop (loop index 17) at tnmt_pvt.cxx <line 502> was not SIMD vectorized because the loop is not the innermost loop.
1586-538 (I) Loop (loop index 17) at tnmt_pvt.cxx <line 502> was not SIMD vectorized because it contains unsupported loop structure.
1586-538 (I) Loop (loop index 18) at tnmt_pvt.cxx <line 504> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 18) at tnmt_pvt.cxx <line 504> was not SIMD vectorized because it contains control flow.
1586-538 (I) Loop (loop index 21) at tnmt_pvt.cxx <line 473> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 21) at tnmt_pvt.cxx <line 473> was not SIMD vectorized because it contains control flow.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"11">. Total number of the innermost loops SIMD vectorized <"0">.
1586-539 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 687> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 626> was not SIMD vectorized because it contains function calls.
1586-549 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 677> was not SIMD vectorized because a data dependence  prevents SIMD vectorization.
1586-550 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 677> was not SIMD vectorized because it is not profitable to vectorize.
1586-537 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 678> was not SIMD vectorized because it contains operation in ((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))->(int).rns43.[$$CIV13] + ((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))->(int).rns43.[$$CIV13] which is not suitable for SIMD vectorization.
1586-551 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 678> was not SIMD vectorized because it contains unsupported vector data types.
1586-537 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 679> was not SIMD vectorized because it contains operation in ((ncol_fw + ncol_bw) * ((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))->(int).rns43.[$$CIV13 + 1ll]) / 2 which is not suitable for SIMD vectorization.
1586-551 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 679> was not SIMD vectorized because it contains unsupported vector data types.
1586-549 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 668> was not SIMD vectorized because a data dependence  prevents SIMD vectorization.
1586-550 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 668> was not SIMD vectorized because it is not profitable to vectorize.
1586-537 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 669> was not SIMD vectorized because it contains operation in ((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))->(int).rns43.[$$CIV12] + ((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))->(int).rns43.[$$CIV12] which is not suitable for SIMD vectorization.
1586-551 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 669> was not SIMD vectorized because it contains unsupported vector data types.
1586-539 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 636> was not SIMD vectorized because it contains function calls.
1586-538 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 606> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 6) at tnmt_pvt.cxx <line 606> was not SIMD vectorized because it contains control flow.
1586-539 (I) Loop (loop index 7) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 8) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 11) at tnmt_pvt.cxx <line 687> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 12) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 13) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 14) at tnmt_pvt.cxx <line 687> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 16) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 17) at tnmt_pvt.cxx <line 687> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 20) at tnmt_pvt.cxx <line 687> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 21) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 23) at tnmt_pvt.cxx <line 687> was not SIMD vectorized because it contains function calls.
1586-538 (I) Loop (loop index 25) at tnmt_pvt.cxx <line 606> was not SIMD vectorized because it contains unsupported loop structure.
1586-552 (I) Loop (loop index 25) at tnmt_pvt.cxx <line 606> was not SIMD vectorized because it contains control flow.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"13">. Total number of the innermost loops SIMD vectorized <"0">.
1586-539 (I) Loop (loop index 1) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 2) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 3) at tnmt_pvt.cxx <line 121> was not SIMD vectorized because it contains function calls.
1586-534 (I) Loop (loop index 4) at tnmt_pvt.cxx <line 24> was not SIMD vectorized because the loop is not the innermost loop.
1586-540 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references R->(double).rns1.$$107[((long long) n * $$CIV0 + (long long) P->(int).rns0.$$107[$$CIV1]) - 1ll] = R->(double).rns1.$$107[$$CIV1 + (long long) n * $$CIV0]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references $$TVX.$$.swp22 = R->(double).rns1.$$107[((long long) n * $$CIV0 + (long long) P->(int).rns0.$$107[$$CIV1]) - 1ll]; with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 25> was not SIMD vectorized because it contains memory references R->(double).rns1.$$107[$$CIV1 + (long long) n * $$CIV0] = $$TVX.$$.swp22; with non-vectorizable strides.
1586-540 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because it contains memory references ((char *)R + (8ll)*(((long long) n * $$CIV0 + (long long) P->(int).rns0.$$107[$$CIV1]) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 27> was not SIMD vectorized because it contains non-stride-one store references ((char *)R + (8ll)*(((long long) n * $$CIV0 + (long long) P->(int).rns0.$$107[$$CIV1]) - 1ll)).
1586-540 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 26> was not SIMD vectorized because it contains memory references ((char *)R + (8ll)*(((long long) n * $$CIV0 + (long long) P->(int).rns0.$$107[$$CIV1]) - 1ll)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 26> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-540 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because it contains memory references ((char *)R + (8ll)*($$CIV1 + (long long) n * $$CIV0)) with non-vectorizable strides.
1586-554 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because the floating point operation is not vectorizable under -qstrict.
1586-556 (I) Loop (loop index 5) at tnmt_pvt.cxx <line 28> was not SIMD vectorized because it contains non-stride-one store references ((char *)R + (8ll)*($$CIV1 + (long long) n * $$CIV0)).
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"4">. Total number of the innermost loops SIMD vectorized <"0">.
1586-539 (I) Loop (loop index 1) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 2) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"2">. Total number of the innermost loops SIMD vectorized <"0">.
1586-539 (I) Loop (loop index 1) at tnmt_pvt.cxx <line 183> was not SIMD vectorized because it contains function calls.
1586-539 (I) Loop (loop index 2) at tnmt_pvt.cxx <line 178> was not SIMD vectorized because it contains function calls.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"2">. Total number of the innermost loops SIMD vectorized <"0">.
1586-539 (I) Loop (loop index 1) at ../shared/util.h <line 467> was not SIMD vectorized because it contains function calls.
1586-543 (I) <SIMD info> Total number of the innermost loops considered <"1">. Total number of the innermost loops SIMD vectorized <"0">.
    17 |  void cdlaswp(int, double*, int, int, int, int const*, int)(int n, long long *A, int lda, int k1, int k2, int *IPIV, int inc)
    20 |  {
    24 |    if (!(k1 - 1 < k2)) goto lab_3;
            if (!(0 < n)) goto lab_24;
            if (!1) goto lab_23;
            $$CIV1 = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 17 */
              /* bump-normalized */
    25 |      if (!1) goto lab_6;
              $$CIV0 = 0ll;
              do {   /* id=2 guarded */ /* ~4 */ 
                /* region = 16 */
                /* bump-normalized */
    26 |        $$TVX.$$.swp00 = A[((long long) lda * $$CIV0 + (long long) IPIV[$$CIV1 + (long long) (k1 - 1)]) - 1ll];
    27 |        A[((long long) lda * $$CIV0 + (long long) IPIV[$$CIV1 + (long long) (k1 - 1)]) - 1ll] = A[($$CIV1 + (long long) (k1 - 1)) + (long long) lda * $$CIV0];
    28 |        A[($$CIV1 + (long long) (k1 - 1)) + (long long) lda * $$CIV0] = $$TVX.$$.swp00;
    25 |        $$CIV0 = $$CIV0 + 1ll;
              } while ((unsigned long long) $$CIV0 < (unsigned long long) ((long long) n));    /* ~4 */
            lab_6:
    24 |      $$CIV1 = $$CIV1 + 1ll;
            } while ((unsigned long long) $$CIV1 < (unsigned long long) ((long long) k2 - (long long) (k1 - 1)));    /* ~1 */
          lab_23:
          lab_24:
          lab_3:
    34 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            24             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            26                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)A + (8ll)*(((long long) 
                                          lda * $$CIV0 + (long long) IPIV->(int).rns0.[$$CIV1 + 
                                          (long long) (k1 - 1)]) - 1ll)) with  non-vectorizable 
                                          strides.
         0            26                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            27                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)A + (8ll)*(((long long) 
                                          lda * $$CIV0 + (long long) IPIV->(int).rns0.[$$CIV1 + 
                                          (long long) (k1 - 1)]) - 1ll)) with  non-vectorizable 
                                          strides.
         0            27                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            27                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)A + 
                                          (8ll)*(((long long) lda * $$CIV0 + (long long) 
                                          IPIV->(int).rns0.[$$CIV1 + (long long) (k1 - 1)]) - 
                                          1ll)).
         0            28                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)A + (8ll)*(($$CIV1 + (long 
                                          long) (k1 - 1)) + (long long) lda * $$CIV0)) with  
                                          non-vectorizable strides.
         0            28                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            28                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)A + 
                                          (8ll)*(($$CIV1 + (long long) (k1 - 1)) + (long long) 
                                          lda * $$CIV0)).

    36 |  void pivot_conv_direct(int, int const*, int*)(int n, int *P1, int *P2)
          {
    38 |    P2_cpy = malloc((unsigned long long) n * 4ull);
    39 |    __builtin_memcpy(P2_cpy,P2,(unsigned long long) n * 4ull);
    40 |    if (!(0 < n)) goto lab_3;
            $$CIV2 = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 9 */
              /* bump-normalized */
    41 |      P2[$$CIV2] = P2_cpy[(long long) P1[$$CIV2]];
    40 |      $$CIV2 = $$CIV2 + 1ll;
            } while ((unsigned long long) $$CIV2 < (unsigned long long) ((long long) n));    /* ~1 */
          lab_3:
    43 |    free(P2_cpy)
    44 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            40             1    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0            41                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)P2_cpy + (4ll)*((long 
                                          long) P1->(int).rns5.[$$CIV2])) with  
                                          non-vectorizable strides.
         0            41                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.

    46 |  void pivot_conv(int, int const*, int*)(int n, int *P1, int *P2)
          {
    48 |    if (!(0 < n)) goto lab_3;
            $$CIV3 = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 9 */
              /* bump-normalized */
    49 |      tmp = P2[(long long) (P1[$$CIV3] - 1)];
    50 |      P2[(long long) (P1[$$CIV3] - 1)] = P2[$$CIV3];
    51 |      P2[$$CIV3] = tmp;
    48 |      $$CIV3 = $$CIV3 + 1ll;
            } while ((unsigned long long) $$CIV3 < (unsigned long long) ((long long) n));    /* ~1 */
          lab_3:
    53 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            49                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)P2 + (4ll)*((long long) 
                                          (P1->(int).rns7.[$$CIV3] - 1))) with  
                                          non-vectorizable strides.
         0            49                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            50                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)P2 + (4ll)*((long long) 
                                          (P1->(int).rns7.[$$CIV3] - 1))) with  
                                          non-vectorizable strides.
         0            50                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            50                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)P2 + 
                                          (4ll)*((long long) (P1->(int).rns7.[$$CIV3] - 1))).
         0            51                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.

    55 |  void pivot_mat(int, int, int const*, double const*, double*)(int nrow, int ncol, int *P, long long *A, long long *B)
          {
    57 |    if (!(0 < ncol)) goto lab_3;
            if (!(0 < nrow)) goto lab_24;
            if (!1) goto lab_23;
            $$CIV5 = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 17 */
              /* bump-normalized */
    58 |      if (!1) goto lab_6;
              $$CIV4 = 0ll;
              do {   /* id=2 guarded */ /* ~4 */ 
                /* region = 16 */
                /* bump-normalized */
    59 |        B[(long long) nrow * $$CIV5 + $$CIV4] = A[(long long) (nrow * (int) $$CIV5 + P[$$CIV4])];
    58 |        $$CIV4 = $$CIV4 + 1ll;
              } while ((unsigned long long) $$CIV4 < (unsigned long long) ((long long) nrow));    /* ~4 */
            lab_6:
    57 |      $$CIV5 = $$CIV5 + 1ll;
            } while ((unsigned long long) $$CIV5 < (unsigned long long) ((long long) ncol));    /* ~1 */
          lab_23:
          lab_24:
          lab_3:
    62 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            57             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            58             2    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0            59                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)A + (8ll)*((long long) 
                                          (nrow * (int) $$CIV5 + P->(int).rns10.[$$CIV4]))) 
                                          with  non-vectorizable strides.
         0            59                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.

    66 |  void br_to_pivot(int, int, int const*, int*)(int nbr, int lda, int *P_br, int *P)
          {
            guard___func__7 = 1;
    68 |    __builtin_memset(P,0,(unsigned long long) nbr * 4ull);
    69 |    if (!(0 < nbr)) goto lab_4;
            $$CIV6 = 0ll;
            do {   /* id=5 guarded */ /* ~2 */ 
              /* region = 40 */
              /* bump-normalized */
    70 |      if (!(P_br[$$CIV6] < nbr)) goto lab_5;
              P[(long long) P_br[$$CIV6]] = -1;
            lab_5:
    69 |      $$CIV6 = $$CIV6 + 1ll;
            } while ((unsigned long long) $$CIV6 < (unsigned long long) ((long long) nbr));    /* ~2 */
          lab_4:
    72 |    if (!(nbr < lda)) goto lab_9;
            $$CIV7 = 0ll;
            do {   /* id=4 guarded */ /* ~7 */ 
              /* region = 41 */
              /* bump-normalized */
              /* independent */
    73 |      P[(long long) ((long long) nbr + $$CIV7)] = (int) ((long long) nbr + $$CIV7);
    72 |      $$CIV7 = $$CIV7 + 1ll;
            } while ((unsigned long long) $$CIV7 < (unsigned long long) ((long long) lda - (long long) nbr));    /* ~7 */
          lab_9:
    76 |    if (!(0 < nbr)) goto lab_12;
            if (!(0 < nbr)) goto lab_12;
    75 |    i.rnnC = 0;
            j = 0;
    76 |    do {   /* id=1 guarded */ /* ~10 */ 
              /* region = 44 */
    77 |      if (!(i.rnnC < nbr)) goto lab_16;
              if (!(P[(long long) i.rnnC] == -1)) goto lab_16;
              do {   /* id=3 guarded */ /* ~14 */ 
                /* region = 42 */
                i.rnnC = i.rnnC + 1;
                if (!(i.rnnC < nbr)) goto lab_16;
              } while (P[(long long) i.rnnC] == -1);    /* ~14 */
            lab_16:
    78 |      if (!(j < nbr)) goto lab_21;
              if (!(P_br[(long long) j] < nbr)) goto lab_21;
              do {   /* id=2 guarded */ /* ~19 */ 
                /* region = 43 */
                j = j + 1;
                if (!(j < nbr)) goto lab_21;
              } while (P_br[(long long) j] < nbr);    /* ~19 */
            lab_21:
    79 |      if (!(i.rnnC < nbr)) goto lab_27;
              if (j < nbr) goto lab_26;
            lab_27:
              if (!(i.rnnC == nbr)) goto lab_25;
              if (!(j == nbr)) goto lab_25;
            lab_26:
    80 |      if (!(i.rnnC < nbr)) goto lab_30;
    81 |      P[(long long) P_br[(long long) j]] = i.rnnC;
    82 |      i.rnnC = i.rnnC + 1;
              j = j + 1;
    83 |    lab_30:
    76 |      if (!(i.rnnC < nbr)) goto lab_12;
            } while (j < nbr);    /* ~10 */
          lab_12:
    85 |    __builtin_memcpy(P,P_br,(unsigned long long) nbr * 4ull);
    86 |    goto lab_36;
    79 |  lab_25:
            __assert_fail("(i<nbr && j<nbr) || (i==nbr && j==nbr)","tnmt_pvt.cxx",79u,&__func__)
            return;
          lab_36:
            return;
    86 |  } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0            69             5    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            69             5    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0            73                  Loop was not SIMD vectorized because it contains 
                                          operation in (long long) nbr + $$CIV7 which is not  
                                          suitable for SIMD vectorization.
         0            73                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            76             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            76             1    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            77             3    Loop cannot be normalized and no loop optimizations 
                                          applied.
         0            77             3    Loop cannot be normalized and no loop optimizations 
                                          applied.
         0            77             3    Loop cannot be normalized and no loop optimizations 
                                          applied.
         0            77             3    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            77             3    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0            78             2    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            78             2    Loop was not SIMD vectorized because it contains 
                                          control flow.

    89 |  void inv_br(int, int, int const*, int*, int*)(int nbr, int off, int *P_br, int *P, int *P_loc)
    93 |  {
            guard___func__8 = 1;
   700 |    if (!(0ll != (long long) nbr * 4ll)) goto lab_4;
   737 |    $$CIV8 = 0ll;
   700 |    do {   /* id=5 guarded */ /* ~2 */ 
              /* region = 55 */
              /* bump-normalized */
              /* independent */
   702 |      P[$$CIV8] = -1;
   701 |      $$CIV8 = $$CIV8 + 1ll;
            } while ((unsigned long long) $$CIV8 < (unsigned long long) (((long long) nbr * 4ll) / 4ll));    /* ~2 */
          lab_4:
    96 |    if (!(0 < nbr)) goto lab_7;
            if (!(P_loc != NULL)) goto lab_66;
            if (!1) goto lab_65;
            $$CIV9 = 0ll;
            do {   /* id=4 guarded */ /* ~5 */ 
              /* region = 56 */
              /* bump-normalized */
    97 |      if (!(P_br[$$CIV9] < nbr + off)) goto lab_8;
    98 |      P[(long long) (P_br[$$CIV9] - off)] = P_br[$$CIV9];
   100 |      P_loc[$$CIV9] = P_br[$$CIV9] - off;
   101 |      goto lab_12;
            lab_8:
   102 |      P_loc[$$CIV9] = (int) $$CIV9;
   103 |    lab_12:
   104 |      if (!(P_br[$$CIV9] >= off)) goto lab_16;
    96 |      $$CIV9 = $$CIV9 + 1ll;
            } while ((unsigned long long) $$CIV9 < (unsigned long long) ((long long) nbr));    /* ~5 */
          lab_65:
            goto lab_67;
          lab_66:
            if (!1) goto lab_73;
            $$CIV9 = 0ll;
            do {   /* id=6 guarded */ /* ~68 */ 
              /* region = 57 */
              /* bump-normalized */
    97 |      if (!(P_br[$$CIV9] < nbr + off)) goto lab_70;
    98 |      P[(long long) (P_br[$$CIV9] - off)] = P_br[$$CIV9];
   101 |      goto lab_72;
            lab_70:
   103 |    lab_72:
   104 |      if (!(P_br[$$CIV9] >= off)) goto lab_16;
    96 |      $$CIV9 = $$CIV9 + 1ll;
            } while ((unsigned long long) $$CIV9 < (unsigned long long) ((long long) nbr));    /* ~68 */
          lab_73:
          lab_67:
          lab_7:
   107 |    if (!(0 < nbr)) goto lab_20;
            if (!(0 < nbr)) goto lab_20;
   106 |    i.rnn11 = 0;
            j = 0;
   107 |    do {   /* id=1 guarded */ /* ~18 */ 
              /* region = 60 */
   108 |      if (!(i.rnn11 < nbr)) goto lab_24;
              if (!(P[(long long) i.rnn11] != -1)) goto lab_24;
              do {   /* id=3 guarded */ /* ~22 */ 
                /* region = 58 */
                i.rnn11 = i.rnn11 + 1;
                if (!(i.rnn11 < nbr)) goto lab_24;
              } while (P[(long long) i.rnn11] != -1);    /* ~22 */
            lab_24:
   109 |      if (!(j < nbr)) goto lab_29;
              if (!(P_br[(long long) j] < nbr + off)) goto lab_29;
              do {   /* id=2 guarded */ /* ~27 */ 
                /* region = 59 */
                j = j + 1;
                if (!(j < nbr)) goto lab_29;
              } while (P_br[(long long) j] < nbr + off);    /* ~27 */
            lab_29:
   110 |      if (!(i.rnn11 < nbr)) goto lab_35;
              if (j < nbr) goto lab_34;
            lab_35:
              if (!(i.rnn11 == nbr)) goto lab_33;
              if (!(j == nbr)) goto lab_33;
            lab_34:
   111 |      if (!(i.rnn11 < nbr)) goto lab_38;
   112 |      P[(long long) i.rnn11] = P_br[(long long) j];
   113 |      i.rnn11 = i.rnn11 + 1;
              j = j + 1;
   114 |    lab_38:
   107 |      if (!(i.rnn11 < nbr)) goto lab_20;
            } while (j < nbr);    /* ~18 */
          lab_20:
   116 |    goto lab_44;
   110 |  lab_33:
            __assert_fail("(i<nbr && j<nbr) || (i==nbr && j==nbr)","tnmt_pvt.cxx",110u,&__func__)
            return;
   104 |  lab_16:
            __assert_fail("P_br[i] >= off","tnmt_pvt.cxx",104u,&__func__)
            return;
          lab_44:
            return;
   116 |  } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
        78           700             5    Loop was not SIMD vectorized because it is not 
                                          profitable to vectorize.
        78           702                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            96             4    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            96             4    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0            96             6    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0            96             6    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           107             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           107             1    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           108             3    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           108             3    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           109             2    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           109             2    Loop was not SIMD vectorized because it contains 
                                          control flow.

   119 |  void pack_bwd(double*, int, int, int)(char * A, int nrow, int lda, int ncol)
          {
   121 |    if (!(1 < ncol)) goto lab_3;
            $$CIVA = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 9 */
              /* bump-normalized */
   122 |      __builtin_memcpy(((char *)A  + ((long long) nrow * ($$CIVA + 1ll)) * 8ll),((char *)A  + ((long long) lda * ($$CIVA + 1ll)) * 8ll),(unsigned long long) nrow * 8ull);
   121 |      $$CIVA = $$CIVA + 1ll;
            } while ((unsigned long long) $$CIVA < (unsigned long long) ((long long) ncol - 1ll));    /* ~1 */
          lab_3:
   124 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0           121             1    Loop was not SIMD vectorized because it contains 
                                          function calls.

   192 |  void tnmt_pvt_1d(double*, double*, int*, double*, int*, int, int, int, int, int, CommData)(char * R, long long *R_out, char * P_in, char * R_buf, int *P_out, int b, int myRank, int pe_start, int numPes, int root, aggr20 cdt)
   204 |  {
            __es.__l@0 = 0;
            __es.__t@8 = &__fsm_tab;
            __es.__this@10 = NULL;
            __es.__i@18 = 0;
   218 |    if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) >= 0)) goto lab_6;
   219 |    __builtin_memcpy(P_out,P_in,(unsigned long long) b * 4ull);
   220 |    if (!(numPes == 1)) goto lab_8;
   221 |    __builtin_memcpy(R_out,R,(unsigned long long) (b * b) * 8ull);
   223 |    goto lab_60;
   224 |  lab_8:
   225 |    R_curr = R;
   226 |  lab_6:
   227 |    CTF_Timer::CTF_Timer(char const*)(&t,"tnmt_pvt_1d");
            __es.__c4@3 = 1u;
            CTF_Timer::start()(&t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&t);
   231 |    if (!(numPes > 1)) goto lab_18;
            np = numPes;
            if (!(0 < b)) goto lab_85;
            if (!1) goto lab_86;
            if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) >= 0)) goto lab_119;
            if (!1) goto lab_118;
            do {   /* id=1 guarded */ /* ~16 */ 
              /* region = 100 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_21;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_19;
            lab_21:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_19;
   239 |      if (0 == np % 2) goto lab_27;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_26;
            lab_27:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_26:
   244 |      goto lab_35;
            lab_19:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np / 2)) goto lab_36;
   247 |      comm_pe = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (np + 1) / 2 >= pe_start + (numPes - root) ? (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (root - numPes)) : (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root));
   251 |      MPI_Irecv(R_buf,b * b,1275070475,comm_pe,0,cdt.cm@0,&req);
   252 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   254 |      MPI_Irecv(((char *)P_out  + (long long) b * 4ll),b,1275069445,comm_pe,0,cdt.cm@0,&req);
   255 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 5u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   256 |      coalesce_bwd(double const*, double*, double, int)(R_curr,R_buf, 0.0000000000000000E+000,b)
   136 |      guard___func__10 = 1;
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   141 |      cdgetrf(int, int, double*, int, int*, int*)(b * 2,b,R_out,b * 2,((char *)P_out  + (long long) (b * 2) * 4ll),&info)
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
    24 |      if (!1) goto lab_74;
              $$CIV1 = 0ll;
              do {   /* id=5 guarded */ /* ~75 */ 
                /* region = 99 */
                /* bump-normalized */
    25 |        if (!1) goto lab_76;
                $$CIV0 = 0ll;
                do {   /* id=6 guarded */ /* ~77 */ 
                  /* region = 98 */
                  /* bump-normalized */
    26 |          $$TVX.$$.swp11 = R_out[((long long) (b * 2) * $$CIV0 + (long long) ((int *)(((char *)P_out  + (long long) (b * 2) * 4ll)))[$$CIV1]) - 1ll];
    27 |          R_out[((long long) (b * 2) * $$CIV0 + (long long) ((int *)(((char *)P_out  + (long long) (b * 2) * 4ll)))[$$CIV1]) - 1ll] = R_out[$$CIV1 + (long long) (b * 2) * $$CIV0];
    28 |          R_out[$$CIV1 + (long long) (b * 2) * $$CIV0] = $$TVX.$$.swp11;
    25 |          $$CIV0 = $$CIV0 + 1ll;
                } while ((unsigned long long) $$CIV0 < (unsigned long long) ((long long) b));    /* ~77 */
              lab_76:
    24 |        $$CIV1 = $$CIV1 + 1ll;
              } while ((unsigned long long) $$CIV1 < (unsigned long long) ((long long) b));    /* ~75 */
            lab_74:
   151 |      if (!(b * 2 > b)) goto lab_79;
   121 |      if (!(1 < b)) goto lab_80;
              $$CIVA = 0ll;
              do {   /* id=7 guarded */ /* ~81 */ 
                /* region = 96 */
                /* bump-normalized */
   122 |        __builtin_memcpy(((char *)R_out  + (long long) b * ($$CIVA * 8ll + 8ll)),((char *)R_out  + (long long) (b * 2) * ($$CIVA * 8ll + 8ll)),(unsigned long long) b * 8ull);
   121 |        $$CIVA = $$CIVA + 1ll;
              } while ((unsigned long long) $$CIVA < (unsigned long long) ((long long) b - 1ll));    /* ~81 */
            lab_80:
   152 |    lab_79:
    48 |      if (!1) goto lab_61;
              $$CIV3 = 0ll;
              do {   /* id=2 guarded */ /* ~62 */ 
                /* region = 97 */
                /* bump-normalized */
    49 |        tmp = P_out[(long long) (((int *)(((char *)P_out  + (long long) (b * 2) * 4ll)))[$$CIV3] - 1)];
    50 |        P_out[(long long) (((int *)(((char *)P_out  + (long long) (b * 2) * 4ll)))[$$CIV3] - 1)] = P_out[$$CIV3];
    51 |        P_out[$$CIV3] = tmp;
    48 |        $$CIV3 = $$CIV3 + 1ll;
              } while ((unsigned long long) $$CIV3 < (unsigned long long) ((long long) b));    /* ~62 */
            lab_61:
   262 |      R_curr = R_out;
   263 |    lab_36:
            lab_35:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~16 */
          lab_118:
            goto lab_86;
          lab_119:
            if (!1) goto lab_137;
            do {   /* id=3 guarded */ /* ~121 */ 
              /* region = 101 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_122;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_125;
            lab_122:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_125;
   239 |      if (0 == np % 2) goto lab_123;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_124;
            lab_123:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_124:
   244 |      goto lab_136;
            lab_125:
   263 |    lab_136:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~121 */
          lab_137:
            goto lab_86;
          lab_85:
            if (!1) goto lab_103;
            if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) >= 0)) goto lab_105;
            if (!1) goto lab_104;
            do {   /* id=4 guarded */ /* ~87 */ 
              /* region = 103 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_88;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_91;
            lab_88:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_91;
   239 |      if (0 == np % 2) goto lab_89;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_90;
            lab_89:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_90:
   244 |      goto lab_102;
            lab_91:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np / 2)) goto lab_101;
   247 |      comm_pe = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (np + 1) / 2 >= pe_start + (numPes - root) ? (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (root - numPes)) : (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root));
   251 |      MPI_Irecv(R_buf,b * b,1275070475,comm_pe,0,cdt.cm@0,&req);
   252 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   254 |      MPI_Irecv(((char *)P_out  + (long long) b * 4ll),b,1275069445,comm_pe,0,cdt.cm@0,&req);
   255 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 5u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   256 |      coalesce_bwd(double const*, double*, double, int)(R_curr,R_buf, 0.0000000000000000E+000,b)
   136 |      guard___func__10 = 1;
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   141 |      cdgetrf(int, int, double*, int, int*, int*)(b * 2,b,R_out,b * 2,((char *)P_out  + (long long) (b * 2) * 4ll),&info)
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   151 |      if (!(b * 2 > b)) goto lab_98;
   121 |      if (!(1 < b)) goto lab_97;
              $$CIVA = 0ll;
              do {   /* id=9 guarded */ /* ~96 */ 
                /* region = 102 */
                /* bump-normalized */
   122 |        __builtin_memcpy(((char *)R_out  + (long long) b * ($$CIVA * 8ll + 8ll)),((char *)R_out  + (long long) (b * 2) * ($$CIVA * 8ll + 8ll)),(unsigned long long) b * 8ull);
   121 |        $$CIVA = $$CIVA + 1ll;
              } while ((unsigned long long) $$CIVA < (unsigned long long) ((long long) b - 1ll));    /* ~96 */
            lab_97:
   152 |    lab_98:
   262 |      R_curr = R_out;
   263 |    lab_101:
            lab_102:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~87 */
          lab_104:
            goto lab_106;
          lab_105:
            if (!1) goto lab_117;
            do {   /* id=10 guarded */ /* ~107 */ 
              /* region = 104 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_108;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_111;
            lab_108:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_111;
   239 |      if (0 == np % 2) goto lab_109;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_110;
            lab_109:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_110:
   244 |      goto lab_116;
            lab_111:
   263 |    lab_116:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~107 */
          lab_117:
          lab_106:
          lab_103:
          lab_86:
          lab_18:
   267 |    CTF_Timer::CTF_Timer(char const*)(&t,"tnmt_pvt_1d");
            __es.__c4@3 = 7u;
            CTF_Timer::stop()(&t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&t);
   268 |  lab_60:
            return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0           231             1    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0            24             5    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            26                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)R_out + (8ll)*(((long 
                                          long) (b * 2) * $$CIV0 + (long long) ((char *)P_out  
                                          + (long long) (b * 2) * 
                                          4ll)->(int).rns0.$$107$$34[$$CIV1]) - 1ll)) with  
                                          non-vectorizable strides.
         0            26                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            27                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)R_out + (8ll)*(((long 
                                          long) (b * 2) * $$CIV0 + (long long) ((char *)P_out  
                                          + (long long) (b * 2) * 
                                          4ll)->(int).rns0.$$107$$34[$$CIV1]) - 1ll)) with  
                                          non-vectorizable strides.
         0            27                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            27                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)R_out + 
                                          (8ll)*(((long long) (b * 2) * $$CIV0 + (long long) 
                                          ((char *)P_out  + (long long) (b * 2) * 
                                          4ll)->(int).rns0.$$107$$34[$$CIV1]) - 1ll)).
         0            28                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)R_out + (8ll)*($$CIV1 + 
                                          (long long) (b * 2) * $$CIV0)) with  non-vectorizable 
                                          strides.
         0            28                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            28                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)R_out + 
                                          (8ll)*($$CIV1 + (long long) (b * 2) * $$CIV0)).
         0           121             7    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0            49                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)P_out + (4ll)*((long long) 
                                          (((char *)P_out  + (long long) (b * 2) * 
                                          4ll)->(int).rns7.$$35[$$CIV3] - 1))) with  
                                          non-vectorizable strides.
         0            49                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            50                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)P_out + (4ll)*((long long) 
                                          (((char *)P_out  + (long long) (b * 2) * 
                                          4ll)->(int).rns7.$$35[$$CIV3] - 1))) with  
                                          non-vectorizable strides.
         0            50                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0            50                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)P_out + 
                                          (4ll)*((long long) (((char *)P_out  + (long long) (b 
                                          * 2) * 4ll)->(int).rns7.$$35[$$CIV3] - 1))).
         0            51                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0           231             3    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           231             4    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           121             9    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           231            10    Loop was not SIMD vectorized because it contains 
                                          function calls.

   421 |  void par_pivot(double*, double*, int, int, int, int, int, int, int*, int*, int, int, int, int, int, int, int, CommData, CommData, int*, int, int)(long long *A, long long *buffer, int npiv, int ncol, int b, int lda_A, int idx_off, int glb_off, int *P_r, int *P_app, int myRank, int lrRank, int numPes, int numLrs, int root, int st_blk, int num_blk, aggr20 cdt_col, aggr20 cdt_kdir, char * pvt_buffer, int is_tnmt_pvt, int nloaded)
   444 |  {
            __es.__l@0 = 0;
            __es.__t@8 = &__fsm_tab;
            __es.__this@10 = NULL;
            __es.__i@18 = 0;
   448 |    if (!(myRank == root)) goto lab_1;
   452 |    if (!(is_tnmt_pvt != 0)) goto lab_6;
   453 |    inv_br(int, int, int const*, int*, int*)(npiv,glb_off,P_app,((char *)P_app  + (long long) npiv * 4ll),pvt_buffer)
            goto lab_8;
          lab_6:
   455 |    __builtin_memcpy(((char *)P_app  + (long long) npiv * 4ll),P_app,(unsigned long long) npiv * 4ull);
          lab_8:
   458 |    __builtin_memcpy(((char *)P_app  + (long long) (npiv * 2) * 4ll),P_r,(unsigned long long) npiv * 4ull);
   463 |    if (!(lda_A == npiv)) goto lab_80;
   464 |    __builtin_memcpy(buffer,A,(unsigned long long) (npiv * ncol) * 8ull);
   465 |    goto lab_81;
          lab_80:
   467 |    if (!(0 < ncol)) goto lab_82;
            $$CIV18 = 0ll;
            do {   /* id=8 guarded */ /* ~83 */ 
              /* region = 124 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)buffer  + 8ll * ($$CIV18 * (long long) npiv)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) npiv * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol));    /* ~83 */
          lab_82:
   470 |  lab_81:
   460 |  lab_1:
   463 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Bcast");
            __es.__c4@3 = 1u;
            CTF_Timer::start()(&__t)
            PMPI_Bcast(((char *)P_app  + (long long) npiv * 4ll),npiv * 2,1275069445,root,cdt_col.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   464 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Bcast");
            __es.__c4@3 = 2u;
            CTF_Timer::start()(&__t)
            PMPI_Bcast(buffer,npiv * ncol,1275070475,root,cdt_col.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   473 |    if (!(0 < npiv)) goto lab_26;
            if (!(0 < ncol)) goto lab_108;
            if (!(0 < npiv)) goto lab_90;
            if (!1) goto lab_89;
            $$CIVF = 0ll;
            do {   /* id=1 guarded */ /* ~24 */ 
              /* region = 130 */
              /* bump-normalized */
   478 |      if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) >= b * myRank)) goto lab_27;
              if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) < (myRank + 1) * b)) goto lab_27;
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) >= st_blk)) goto lab_27;
   474 |      row_dest = P_app[(long long) npiv + $$CIVF];
   475 |      row_mod = P_app[(long long) npiv + $$CIVF] % (b * numPes);
   476 |      row_blk = P_app[(long long) npiv + $$CIVF] / (b * numPes);
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) < st_blk + num_blk)) goto lab_27;
   481 |      P_app[$$CIVF] = P_r[(long long) ((b * (P_app[(long long) npiv + $$CIVF] / (b * numPes)) + P_app[(long long) npiv + $$CIVF] % (b * numPes)) - (idx_off + b * myRank))];
   495 |      if (!1) goto lab_34;
              $$CIVB = 0ll;
              do {   /* id=6 guarded */ /* ~32 */ 
                /* region = 128 */
                /* bump-normalized */
   496 |        ((double *)(((char *)buffer  + (long long) (npiv * ncol) * 8ll)))[$$CIVF + (long long) npiv * $$CIVB] = A[(long long) lda_A * $$CIVB + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank))];
   495 |        $$CIVB = $$CIVB + 1ll;
              } while ((unsigned long long) $$CIVB < (unsigned long long) ((long long) ncol));    /* ~32 */
            lab_34:
   500 |      r = (int) $$CIVF;
   501 |      if (!(row_dest - glb_off >= npiv)) goto lab_35;
   502 |      do {   /* id=4 */ /* ~37 */ 
                /* region = 126 */
   504 |        if (!1) goto lab_42;
                $$CIVC = 0ll;
                do {   /* id=5 guarded */ /* ~40 */ 
                  /* region = 125 */
                  /* bump-normalized */
   505 |          if (P_app[(long long) npiv + $$CIVC] == r + glb_off) goto lab_63;
   504 |          $$CIVC = $$CIVC + 1ll;
                } while ((unsigned long long) $$CIVC < (unsigned long long) ((long long) npiv));    /* ~40 */
              lab_42:
   503 |        isv.rnn1E = 1;
   504 |        goto lab_65;
   505 |      lab_63:
   506 |        isv.rnn1E = 0;
   507 |        r = (int) $$CIVC;
   504 |      lab_65:
   511 |      } while (isv.rnn1E == 0);    /* ~37 */
   512 |    lab_35:
   513 |      P_r[(long long) ((b * row_blk + row_mod) - (b * myRank + idx_off))] = P_app[(long long) (npiv * 2 + r)];
   529 |      if (!1) goto lab_47;
              $$CIVD = 0ll;
              do {   /* id=3 guarded */ /* ~45 */ 
                /* region = 127 */
                /* bump-normalized */
   530 |        A[(long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank))] = buffer[(long long) r + (long long) npiv * $$CIVD];
   529 |        $$CIVD = $$CIVD + 1ll;
              } while ((unsigned long long) $$CIVD < (unsigned long long) ((long long) ncol));    /* ~45 */
            lab_47:
   534 |      goto lab_48;
            lab_27:
   537 |      P_app[$$CIVF] = 0;
   538 |      if (!1) goto lab_51;
              $$CIVE = 0ll;
              do {   /* id=2 guarded */ /* ~49 */ 
                /* region = 129 */
                /* bump-normalized */
                /* independent */
   539 |        ((double *)(((char *)buffer  + (long long) (npiv * ncol) * 8ll)))[$$CIVF + (long long) npiv * $$CIVE] =  0.0000000000000000E+000;
   538 |        $$CIVE = $$CIVE + 1ll;
              } while ((unsigned long long) $$CIVE < (unsigned long long) ((long long) ncol));    /* ~49 */
            lab_51:
   541 |    lab_48:
   473 |      $$CIVF = $$CIVF + 1ll;
            } while ((unsigned long long) $$CIVF < (unsigned long long) ((long long) npiv));    /* ~24 */
          lab_89:
            goto lab_109;
          lab_90:
            if (!1) goto lab_107;
            $$CIVF = 0ll;
            do {   /* id=9 guarded */ /* ~92 */ 
              /* region = 134 */
              /* bump-normalized */
   478 |      if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) >= b * myRank)) goto lab_103;
              if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) < (myRank + 1) * b)) goto lab_103;
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) >= st_blk)) goto lab_103;
   474 |      row_dest = P_app[(long long) npiv + $$CIVF];
   475 |      row_mod = P_app[(long long) npiv + $$CIVF] % (b * numPes);
   476 |      row_blk = P_app[(long long) npiv + $$CIVF] / (b * numPes);
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) < st_blk + num_blk)) goto lab_103;
   481 |      P_app[$$CIVF] = P_r[(long long) ((b * (P_app[(long long) npiv + $$CIVF] / (b * numPes)) + P_app[(long long) npiv + $$CIVF] % (b * numPes)) - (idx_off + b * myRank))];
   495 |      if (!1) goto lab_94;
              $$CIVB = 0ll;
              do {   /* id=10 guarded */ /* ~93 */ 
                /* region = 132 */
                /* bump-normalized */
   496 |        ((double *)(((char *)buffer  + (long long) (npiv * ncol) * 8ll)))[$$CIVF + (long long) npiv * $$CIVB] = A[(long long) lda_A * $$CIVB + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank))];
   495 |        $$CIVB = $$CIVB + 1ll;
              } while ((unsigned long long) $$CIVB < (unsigned long long) ((long long) ncol));    /* ~93 */
            lab_94:
   501 |      if (!(row_dest - glb_off >= npiv)) goto lab_100;
   512 |    lab_100:
   513 |      P_r[(long long) ((b * row_blk + row_mod) - (b * myRank + idx_off))] = P_app[(long long) npiv * 2ll + $$CIVF];
   529 |      if (!1) goto lab_102;
              $$CIVD = 0ll;
              do {   /* id=13 guarded */ /* ~101 */ 
                /* region = 131 */
                /* bump-normalized */
   530 |        A[(long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank))] = buffer[$$CIVF + (long long) npiv * $$CIVD];
   529 |        $$CIVD = $$CIVD + 1ll;
              } while ((unsigned long long) $$CIVD < (unsigned long long) ((long long) ncol));    /* ~101 */
            lab_102:
   534 |      goto lab_106;
            lab_103:
   537 |      P_app[$$CIVF] = 0;
   538 |      if (!1) goto lab_105;
              $$CIVE = 0ll;
              do {   /* id=14 guarded */ /* ~104 */ 
                /* region = 133 */
                /* bump-normalized */
                /* independent */
   539 |        ((double *)(((char *)buffer  + (long long) (npiv * ncol) * 8ll)))[$$CIVF + (long long) npiv * $$CIVE] =  0.0000000000000000E+000;
   538 |        $$CIVE = $$CIVE + 1ll;
              } while ((unsigned long long) $$CIVE < (unsigned long long) ((long long) ncol));    /* ~104 */
            lab_105:
   541 |    lab_106:
   473 |      $$CIVF = $$CIVF + 1ll;
            } while ((unsigned long long) $$CIVF < (unsigned long long) ((long long) npiv));    /* ~92 */
          lab_107:
            goto lab_109;
          lab_108:
            if (!(0 < npiv)) goto lab_126;
            if (!1) goto lab_125;
            $$CIVF = 0ll;
            do {   /* id=15 guarded */ /* ~110 */ 
              /* region = 137 */
              /* bump-normalized */
   478 |      if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) >= b * myRank)) goto lab_121;
              if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) < (myRank + 1) * b)) goto lab_121;
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) >= st_blk)) goto lab_121;
   474 |      row_dest = P_app[(long long) npiv + $$CIVF];
   475 |      row_mod = P_app[(long long) npiv + $$CIVF] % (b * numPes);
   476 |      row_blk = P_app[(long long) npiv + $$CIVF] / (b * numPes);
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) < st_blk + num_blk)) goto lab_121;
   481 |      P_app[$$CIVF] = P_r[(long long) ((b * (P_app[(long long) npiv + $$CIVF] / (b * numPes)) + P_app[(long long) npiv + $$CIVF] % (b * numPes)) - (idx_off + b * myRank))];
   500 |      r = (int) $$CIVF;
   501 |      if (!(row_dest - glb_off >= npiv)) goto lab_118;
   502 |      do {   /* id=17 */ /* ~113 */ 
                /* region = 136 */
   504 |        if (!1) goto lab_115;
                $$CIVC = 0ll;
                do {   /* id=18 guarded */ /* ~114 */ 
                  /* region = 135 */
                  /* bump-normalized */
   505 |          if (P_app[(long long) npiv + $$CIVC] == r + glb_off) goto lab_116;
   504 |          $$CIVC = $$CIVC + 1ll;
                } while ((unsigned long long) $$CIVC < (unsigned long long) ((long long) npiv));    /* ~114 */
              lab_115:
   503 |        isv.rnn1E = 1;
   504 |        goto lab_117;
   505 |      lab_116:
   506 |        isv.rnn1E = 0;
   507 |        r = (int) $$CIVC;
   504 |      lab_117:
   511 |      } while (isv.rnn1E == 0);    /* ~113 */
   512 |    lab_118:
   513 |      P_r[(long long) ((b * row_blk + row_mod) - (b * myRank + idx_off))] = P_app[(long long) (npiv * 2 + r)];
   534 |      goto lab_124;
            lab_121:
   537 |      P_app[$$CIVF] = 0;
   541 |    lab_124:
   473 |      $$CIVF = $$CIVF + 1ll;
            } while ((unsigned long long) $$CIVF < (unsigned long long) ((long long) npiv));    /* ~110 */
          lab_125:
            goto lab_143;
          lab_126:
            if (!1) goto lab_142;
            $$CIVF = 0ll;
            do {   /* id=21 guarded */ /* ~127 */ 
              /* region = 138 */
              /* bump-normalized */
   478 |      if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) >= b * myRank)) goto lab_138;
              if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) < (myRank + 1) * b)) goto lab_138;
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) >= st_blk)) goto lab_138;
   474 |      row_dest = P_app[(long long) npiv + $$CIVF];
   475 |      row_mod = P_app[(long long) npiv + $$CIVF] % (b * numPes);
   476 |      row_blk = P_app[(long long) npiv + $$CIVF] / (b * numPes);
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) < st_blk + num_blk)) goto lab_138;
   481 |      P_app[$$CIVF] = P_r[(long long) ((b * (P_app[(long long) npiv + $$CIVF] / (b * numPes)) + P_app[(long long) npiv + $$CIVF] % (b * numPes)) - (idx_off + b * myRank))];
   501 |      if (!(row_dest - glb_off >= npiv)) goto lab_135;
   512 |    lab_135:
   513 |      P_r[(long long) ((b * row_blk + row_mod) - (b * myRank + idx_off))] = P_app[(long long) npiv * 2ll + $$CIVF];
   534 |      goto lab_141;
            lab_138:
   537 |      P_app[$$CIVF] = 0;
   541 |    lab_141:
   473 |      $$CIVF = $$CIVF + 1ll;
            } while ((unsigned long long) $$CIVF < (unsigned long long) ((long long) npiv));    /* ~127 */
          lab_142:
          lab_143:
          lab_109:
          lab_26:
   559 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Reduce");
            __es.__c4@3 = 3u;
            CTF_Timer::start()(&__t)
            PMPI_Reduce(((char *)buffer  + (long long) (npiv * ncol) * 8ll),buffer,npiv * ncol,1275070475,1476395011,root,cdt_col.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   560 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Reduce");
            __es.__c4@3 = 4u;
            CTF_Timer::start()(&__t)
            PMPI_Reduce(P_app,((char *)P_app  + (long long) (npiv * 2) * 4ll),npiv,1275069445,1476395011,root,cdt_col.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   562 |    if (!(myRank == root)) goto lab_58;
   563 |    __builtin_memcpy(P_r,((char *)P_app  + (long long) (npiv * 2) * 4ll),(unsigned long long) npiv * 4ull);
   463 |    if (!(lda_A == npiv)) goto lab_75;
   464 |    __builtin_memcpy(A,buffer,(unsigned long long) (npiv * ncol) * 8ull);
   465 |    goto lab_76;
          lab_75:
   467 |    if (!(0 < ncol)) goto lab_77;
            $$CIV18 = 0ll;
            do {   /* id=7 guarded */ /* ~78 */ 
              /* region = 139 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),((char *)buffer  + 8ll * ($$CIV18 * (long long) npiv)),(unsigned long long) npiv * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol));    /* ~78 */
          lab_77:
   470 |  lab_76:
   565 |  lab_58:
   566 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
        71           467             8    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           473             1    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           495             6    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           496                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)((char *)buffer  + (long 
                                          long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long 
                                          long) npiv * $$CIVB)) with  non-vectorizable strides.
         0           496                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           496                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)((char 
                                          *)buffer  + (long long) (npiv * ncol) * 8ll) + 
                                          (8ll)*($$CIVF + (long long) npiv * $$CIVB)).
         0           502             4    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           502             4    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           504             5    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           504             5    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           529             3    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           530                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)A + (8ll)*((long long) 
                                          lda_A * $$CIVD + (((long long) b * (long long) 
                                          row_blk + (long long) row_mod) - ((long long) idx_off 
                                          + (long long) b * (long long) myRank)))) with  
                                          non-vectorizable strides.
         0           530                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           530                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)A + 
                                          (8ll)*((long long) lda_A * $$CIVD + (((long long) b * 
                                          (long long) row_blk + (long long) row_mod) - ((long 
                                          long) idx_off + (long long) b * (long long) 
                                          myRank)))).
         0           539                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)((char *)buffer  + (long 
                                          long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long 
                                          long) npiv * $$CIVE)) with  non-vectorizable strides.
         0           539                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           539                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)((char 
                                          *)buffer  + (long long) (npiv * ncol) * 8ll) + 
                                          (8ll)*($$CIVF + (long long) npiv * $$CIVE)).
         0           473             9    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           495            10    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           496                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)((char *)buffer  + (long 
                                          long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long 
                                          long) npiv * $$CIVB)) with  non-vectorizable strides.
         0           496                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           496                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)((char 
                                          *)buffer  + (long long) (npiv * ncol) * 8ll) + 
                                          (8ll)*($$CIVF + (long long) npiv * $$CIVB)).
         0           529            13    Loop was not SIMD vectorized because the 
                                          aliasing-induced dependence  prevents SIMD 
                                          vectorization.
         0           530                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)A + (8ll)*((long long) 
                                          lda_A * $$CIVD + (((long long) b * (long long) 
                                          row_blk + (long long) row_mod) - ((long long) idx_off 
                                          + (long long) b * (long long) myRank)))) with  
                                          non-vectorizable strides.
         0           530                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           530                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)A + 
                                          (8ll)*((long long) lda_A * $$CIVD + (((long long) b * 
                                          (long long) row_blk + (long long) row_mod) - ((long 
                                          long) idx_off + (long long) b * (long long) 
                                          myRank)))).
         0           539                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)((char *)buffer  + (long 
                                          long) (npiv * ncol) * 8ll) + (8ll)*($$CIVF + (long 
                                          long) npiv * $$CIVE)) with  non-vectorizable strides.
         0           539                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0           539                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)((char 
                                          *)buffer  + (long long) (npiv * ncol) * 8ll) + 
                                          (8ll)*($$CIVF + (long long) npiv * $$CIVE)).
         0           473            15    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           502            17    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0           502            17    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           504            18    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           504            18    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           473            21    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           473            21    Loop was not SIMD vectorized because it contains 
                                          control flow.
        71           467             7    Loop was not SIMD vectorized because it contains 
                                          function calls.

   572 |  void pvt_collc(double*, double*, double*, int, int, int, int, int, int, int, int*, int*, int*, int, int, CommData)(char * A_fw, char * A_bw, char * buffer, int b, int nrow, int ncol_fw, int ncol_bw, int lda_A, int idx_off, int glb_off, int *P_r, int *P_mine, int *P_buf, int myRank, int numPes, aggr20 cdt)
   587 |  {
            __es.__l@0 = 0;
            __es.__t@8 = &__fsm_tab;
            __es.__this@10 = NULL;
            __es.__i@18 = 0;
   604 |    nrow_get = 0;
   606 |    if (!(b > 0)) goto lab_155;
            if (!(0 < nrow)) goto lab_3;
            $$CIV10 = 0ll;
            $$DMSRR0 = (int) ((int) 0 + (int) 0ll * 1) % b;
            $$DMSRQ0 = (int) ((int) 0 + (int) 0ll * 1) / b;
            do {   /* id=6 guarded */ /* ~1 */ 
              /* region = 115 */
              /* bump-normalized */
   608 |      if (!(0 != ($$DMSRR0 + ($$DMSRQ0 * (b * numPes) - P_mine[$$CIV10])) + (b * myRank + glb_off))) goto lab_4;
   609 |      P_buf[(long long) (nrow_get * 2)] = P_mine[$$CIV10];
   610 |      P_buf[(long long) (nrow_get * 2 + 1)] = (int) $$CIV10;
   611 |      nrow_get = nrow_get + 1;
   612 |    lab_4:
   613 |      $$DMSRR0 = $$DMSRR0 + (int) 1;
              if (!($$DMSRR0 >= (1 / b) * b + b)) goto lab_160;
              $$DMSRR0 = $$DMSRR0 + - b;
              $$DMSRQ0 = $$DMSRQ0 + 1;
            lab_160:
              $$DMSRR0 = $$DMSRR0 + - ((1 / b) * b);
              $$DMSRQ0 = $$DMSRQ0 + 1 / b;
   606 |      $$CIV10 = $$CIV10 + 1ll;
            } while ((unsigned long long) $$CIV10 < (unsigned long long) ((long long) nrow));    /* ~1 */
          lab_3:
            goto lab_156;
          lab_155:
            if (!(0 < nrow)) goto lab_159;
            $$CIV10 = 0ll;
            do {   /* id=25 guarded */ /* ~157 */ 
              /* region = 116 */
              /* bump-normalized */
   608 |      if (!(0 != ((int) $$CIV10 % b + (((int) $$CIV10 / b) * (b * numPes) - P_mine[$$CIV10])) + (b * myRank + glb_off))) goto lab_158;
   609 |      P_buf[(long long) (nrow_get * 2)] = P_mine[$$CIV10];
   610 |      P_buf[(long long) (nrow_get * 2 + 1)] = (int) $$CIV10;
   611 |      nrow_get = nrow_get + 1;
   612 |    lab_158:
   606 |      $$CIV10 = $$CIV10 + 1ll;
            } while ((unsigned long long) $$CIV10 < (unsigned long long) ((long long) nrow));    /* ~157 */
          lab_159:
          lab_156:
   618 |    P_buf[(long long) (nrow_get * 2 + numPes)] = nrow_get;
   619 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Allgather");
            __es.__c4@3 = 1u;
            CTF_Timer::start()(&__t)
            PMPI_Allgather(((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),1,1275069445,((char *)P_buf  + (long long) (nrow_get * 2) * 4ll),1,1275069445,cdt.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   626 |    if (!(0 < numPes)) goto lab_11;
            $$CIV14 = 0ll;
            do {   /* id=2 guarded */ /* ~9 */ 
              /* region = 122 */
              /* bump-normalized */
   627 |      if (!(myRank == (int) $$CIV14)) goto lab_12;
   628 |      P_recv = P_buf;
              goto lab_14;
            lab_12:
   630 |      P_recv = ((char *)P_buf  + ((long long) numPes * 12ll + (long long) (nrow_get * 2) * 4ll));
            lab_14:
   632 |      if (!(((int *)(((char *)P_buf  + (long long) (nrow_get * 2) * 4ll)))[$$CIV14] > 0)) goto lab_15;
   631 |      nrow_recv = ((int *)(((char *)P_buf  + (long long) (nrow_get * 2) * 4ll)))[$$CIV14];
   633 |      P_send = ((char *)P_buf  + ((long long) (((int *)(((char *)P_buf  + (long long) (nrow_get * 2) * 4ll)))[$$CIV14] * 2) + ((long long) numPes * 3ll + (long long) (nrow_get * 2))) * 4ll);
   634 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Bcast");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Bcast(P_recv,nrow_recv * 2,1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   635 |      nrow_mine = 0;
   636 |      if (!(nrow_recv > 0)) goto lab_22;
              $$CIV11 = 0ll;
              do {   /* id=5 guarded */ /* ~20 */ 
                /* region = 119 */
                /* bump-normalized */
   639 |        if (!(P_recv[$$CIV11 * 2ll] % (b * numPes) >= b * myRank)) goto lab_23;
                if (!(P_recv[$$CIV11 * 2ll] % (b * numPes) < (myRank + 1) * b)) goto lab_23;
   638 |        row_mod = P_recv[$$CIV11 * 2ll] % (b * numPes);
   640 |        row_blk = P_recv[$$CIV11 * 2ll] / (b * numPes);
   642 |        $$PARM.A4 = ((char *)A_bw  + ((long long) ((b * (P_recv[$$CIV11 * 2ll] / (b * numPes)) + P_recv[$$CIV11 * 2ll] % (b * numPes)) - b * myRank) * 8ll - (long long) idx_off * 8ll));
   463 |        if (!(lda_A == 1)) goto lab_65;
   464 |        __builtin_memcpy(((char *)buffer  + ((long long) ((ncol_fw + ncol_bw) * nrow_get) + (long long) ((ncol_fw + ncol_bw) * nrow_mine)) * 8ll),$$PARM.A4,(unsigned long long) ncol_bw * 8ull);
   465 |        goto lab_66;
              lab_65:
   467 |        if (!(0 < ncol_bw)) goto lab_67;
                $$CIV18 = 0ll;
                do {   /* id=7 guarded */ /* ~68 */ 
                  /* region = 117 */
                  /* bump-normalized */
   468 |          __builtin_memcpy(((char *)buffer  + ($$CIV18 + ((long long) ((ncol_fw + ncol_bw) * nrow_get) + (long long) (nrow_mine * (ncol_fw + ncol_bw)))) * 8ll),((char *)$$PARM.A4  + 8ll * ($$CIV18 * (long long) lda_A)),8ull);
   467 |          $$CIV18 = $$CIV18 + 1ll;
                } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_bw));    /* ~68 */
              lab_67:
   470 |      lab_66:
   463 |        if (!(lda_A == 1)) goto lab_70;
   464 |        __builtin_memcpy(((char *)buffer  + ((long long) ((ncol_fw + ncol_bw) * nrow_mine) + ((long long) ncol_bw + (long long) ((ncol_fw + ncol_bw) * nrow_get))) * 8ll),((char *)A_fw  + ((long long) ((b * row_blk + row_mod) - b * myRank) * 8ll - (long long) idx_off * 8ll)),(unsigned long long) ncol_fw * 8ull);
   465 |        goto lab_71;
              lab_70:
   467 |        if (!(0 < ncol_fw)) goto lab_72;
                $$CIV18 = 0ll;
                do {   /* id=8 guarded */ /* ~73 */ 
                  /* region = 118 */
                  /* bump-normalized */
   468 |          __builtin_memcpy(((char *)buffer  + ($$CIV18 + ((long long) ncol_bw + ((long long) ((ncol_fw + ncol_bw) * nrow_get) + (long long) (nrow_mine * (ncol_fw + ncol_bw))))) * 8ll),((char *)A_fw  + ((long long) lda_A * $$CIV18 + ((long long) (row_blk * b + (row_mod - b * myRank)) - (long long) idx_off)) * 8ll),8ull);
   467 |          $$CIV18 = $$CIV18 + 1ll;
                } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_fw));    /* ~73 */
              lab_72:
   470 |      lab_71:
   652 |        P_send[(long long) (nrow_mine * 2)] = P_r[(long long) ((b * row_blk + row_mod) - (b * myRank + idx_off))];
   653 |        P_send[(long long) (nrow_mine * 2 + 1)] = P_recv[$$CIV11 * 2ll + 1ll];
   654 |        nrow_mine = nrow_mine + 1;
   655 |      lab_23:
   636 |        $$CIV11 = $$CIV11 + 1ll;
              } while ((unsigned long long) $$CIV11 < (unsigned long long) ((long long) nrow_recv));    /* ~20 */
            lab_22:
   663 |      nr2 = nrow_mine * 2;
   664 |      MPI_Gather(&nr2,1,1275069445,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),1,1275069445,(int) $$CIV14,cdt.cm@0);
   666 |      if (!(myRank == (int) $$CIV14)) goto lab_58;
   667 |      ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = 0;
   668 |      if (!(1 < numPes)) goto lab_33;
              $$CIV12 = 0ll;
              do {   /* id=4 guarded */ /* ~31 */ 
                /* region = 120 */
                /* bump-normalized */
   669 |        ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12 + 1ll] = ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12] + ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12];
   668 |        $$CIV12 = $$CIV12 + 1ll;
              } while ((unsigned long long) $$CIV12 < (unsigned long long) ((long long) numPes - 1ll));    /* ~31 */
            lab_33:
   671 |      goto lab_29;
            lab_58:
              CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(P_send,nrow_mine * 2,1275069445,P_buf,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
              goto lab_37;
            lab_29:
   672 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(P_send,nrow_mine * 2,1275069445,P_buf,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   675 |      ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = 0;
   676 |      ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = ((ncol_fw + ncol_bw) * ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[0ll]) / 2;
   677 |      if (!(1 < numPes)) goto lab_41;
              $$CIV13 = 0ll;
              do {   /* id=3 guarded */ /* ~39 */ 
                /* region = 121 */
                /* bump-normalized */
   678 |        ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll] = ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13] + ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13];
   679 |        ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll] = ((ncol_fw + ncol_bw) * ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll]) / 2;
   677 |        $$CIV13 = $$CIV13 + 1ll;
              } while ((unsigned long long) $$CIV13 < (unsigned long long) ((long long) numPes - 1ll));    /* ~39 */
            lab_41:
   681 |    lab_37:
   682 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(((char *)buffer  + (long long) ((ncol_fw + ncol_bw) * nrow_get) * 8ll),(ncol_fw + ncol_bw) * nrow_mine,1275070475,buffer,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275070475,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   685 |    lab_15:
   626 |      $$CIV14 = $$CIV14 + 1ll;
            } while ((unsigned long long) $$CIV14 < (unsigned long long) ((long long) numPes));    /* ~9 */
          lab_11:
   687 |    if (!(0 < nrow_get)) goto lab_47;
            if (!(0 < ncol_fw)) goto lab_114;
            if (!(lda_A == 1)) goto lab_90;
            if (!1) goto lab_89;
            $$CIV15 = 0ll;
            do {   /* id=1 guarded */ /* ~45 */ 
              /* region = 123 */
              /* bump-normalized */
   689 |      row_dest = P_buf[$$CIV15 * 2ll + 1ll];
   690 |      P_r[(long long) P_buf[$$CIV15 * 2ll + 1ll]] = P_buf[$$CIV15 * 2ll];
   464 |      __builtin_memcpy(((char *)A_bw  + (long long) row_dest * 8ll),((char *)buffer  + 8ll * ($$CIV15 * ((long long) ncol_fw + (long long) ncol_bw))),(unsigned long long) ncol_bw * 8ull);
              __builtin_memcpy(((char *)A_fw  + (long long) row_dest * 8ll),((char *)buffer  + ((long long) ncol_bw + ((long long) ncol_fw + (long long) ncol_bw) * $$CIV15) * 8ll),(unsigned long long) ncol_fw * 8ull);
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~45 */
          lab_89:
            goto lab_115;
          lab_90:
            if (!(0 < ncol_bw)) goto lab_102;
            if (!1) goto lab_101;
            $$CIV15 = 0ll;
            do {   /* id=11 guarded */ /* ~92 */ 
              /* region = 126 */
              /* bump-normalized */
   689 |      row_dest = P_buf[$$CIV15 * 2ll + 1ll];
   690 |      P_r[(long long) P_buf[$$CIV15 * 2ll + 1ll]] = P_buf[$$CIV15 * 2ll];
   467 |      if (!1) goto lab_95;
              $$CIV18 = 0ll;
              do {   /* id=12 guarded */ /* ~94 */ 
                /* region = 125 */
                /* bump-normalized */
   468 |        __builtin_memcpy(((char *)A_bw  + ((long long) row_dest + (long long) lda_A * $$CIV18) * 8ll),((char *)buffer  + (((long long) ncol_fw + (long long) ncol_bw) * $$CIV15 + $$CIV18) * 8ll),8ull);
   467 |        $$CIV18 = $$CIV18 + 1ll;
              } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_bw));    /* ~94 */
            lab_95:
              if (!1) goto lab_99;
              $$CIV18 = 0ll;
              do {   /* id=13 guarded */ /* ~98 */ 
                /* region = 124 */
                /* bump-normalized */
   468 |        __builtin_memcpy(((char *)A_fw  + ((long long) row_dest + (long long) lda_A * $$CIV18) * 8ll),((char *)buffer  + ($$CIV18 + (((long long) ncol_fw + (long long) ncol_bw) * $$CIV15 + (long long) ncol_bw)) * 8ll),8ull);
   467 |        $$CIV18 = $$CIV18 + 1ll;
              } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_fw));    /* ~98 */
            lab_99:
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~92 */
          lab_101:
            goto lab_115;
          lab_102:
            if (!1) goto lab_113;
            $$CIV15 = 0ll;
            do {   /* id=14 guarded */ /* ~104 */ 
              /* region = 128 */
              /* bump-normalized */
   689 |      row_dest = P_buf[$$CIV15 * 2ll + 1ll];
   690 |      P_r[(long long) P_buf[$$CIV15 * 2ll + 1ll]] = P_buf[$$CIV15 * 2ll];
   467 |      if (!1) goto lab_111;
              $$CIV18 = 0ll;
              do {   /* id=16 guarded */ /* ~110 */ 
                /* region = 127 */
                /* bump-normalized */
   468 |        __builtin_memcpy(((char *)A_fw  + ((long long) row_dest + (long long) lda_A * $$CIV18) * 8ll),((char *)buffer  + ($$CIV18 + (((long long) ncol_fw + (long long) ncol_bw) * $$CIV15 + (long long) ncol_bw)) * 8ll),8ull);
   467 |        $$CIV18 = $$CIV18 + 1ll;
              } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_fw));    /* ~110 */
            lab_111:
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~104 */
          lab_113:
            goto lab_115;
          lab_114:
            if (!(lda_A == 1)) goto lab_126;
            if (!1) goto lab_125;
            $$CIV15 = 0ll;
            do {   /* id=17 guarded */ /* ~116 */ 
              /* region = 129 */
              /* bump-normalized */
   689 |      row_dest = P_buf[$$CIV15 * 2ll + 1ll];
   690 |      P_r[(long long) P_buf[$$CIV15 * 2ll + 1ll]] = P_buf[$$CIV15 * 2ll];
   464 |      __builtin_memcpy(((char *)A_bw  + (long long) row_dest * 8ll),((char *)buffer  + 8ll * ($$CIV15 * ((long long) ncol_fw + (long long) ncol_bw))),(unsigned long long) ncol_bw * 8ull);
              __builtin_memcpy(((char *)A_fw  + (long long) row_dest * 8ll),((char *)buffer  + ((long long) ncol_bw + ((long long) ncol_fw + (long long) ncol_bw) * $$CIV15) * 8ll),(unsigned long long) ncol_fw * 8ull);
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~116 */
          lab_125:
            goto lab_149;
          lab_126:
            if (!(0 < ncol_bw)) goto lab_137;
            if (!1) goto lab_136;
            $$CIV15 = 0ll;
            do {   /* id=20 guarded */ /* ~127 */ 
              /* region = 131 */
              /* bump-normalized */
   689 |      row_dest = P_buf[$$CIV15 * 2ll + 1ll];
   690 |      P_r[(long long) P_buf[$$CIV15 * 2ll + 1ll]] = P_buf[$$CIV15 * 2ll];
   467 |      if (!1) goto lab_130;
              $$CIV18 = 0ll;
              do {   /* id=21 guarded */ /* ~129 */ 
                /* region = 130 */
                /* bump-normalized */
   468 |        __builtin_memcpy(((char *)A_bw  + ((long long) row_dest + (long long) lda_A * $$CIV18) * 8ll),((char *)buffer  + (((long long) ncol_fw + (long long) ncol_bw) * $$CIV15 + $$CIV18) * 8ll),8ull);
   467 |        $$CIV18 = $$CIV18 + 1ll;
              } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_bw));    /* ~129 */
            lab_130:
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~127 */
          lab_136:
            goto lab_148;
          lab_137:
            if (!1) goto lab_147;
            $$CIV15 = 0ll;
            do {   /* id=23 guarded */ /* ~138 */ 
              /* region = 132 */
              /* bump-normalized */
   690 |      P_r[(long long) P_buf[$$CIV15 * 2ll + 1ll]] = P_buf[$$CIV15 * 2ll];
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~138 */
          lab_147:
          lab_148:
          lab_149:
          lab_115:
          lab_47:
   706 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0           606             6    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           606             6    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           606            25    Loop was not SIMD vectorized because it contains 
                                          unsupported loop structure.
         0           606            25    Loop was not SIMD vectorized because it contains 
                                          control flow.
         0           626             2    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           636             5    Loop was not SIMD vectorized because it contains 
                                          function calls.
        71           467             7    Loop was not SIMD vectorized because it contains 
                                          function calls.
        71           467             8    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           668             4    Loop was not SIMD vectorized because a data 
                                          dependence  prevents SIMD  vectorization.
         0           668             4    Loop was not SIMD vectorized because it is not 
                                          profitable to vectorize.
         0           669                  Loop was not SIMD vectorized because it contains 
                                          operation in ((char *)P_buf  + ((long long) numPes * 
                                          8ll + (long long) (nrow_get * 2) * 
                                          4ll))->(int).rns43.[$$CIV12] + ((char *)P_buf  + 
                                          ((long long) numPes * 4ll + (long long) (nrow_get * 
                                          2) * 4ll))->(int).rns43.[$$CIV12] which is not  
                                          suitable for SIMD vectorization.
         0           669                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0           677             3    Loop was not SIMD vectorized because a data 
                                          dependence  prevents SIMD  vectorization.
         0           677             3    Loop was not SIMD vectorized because it is not 
                                          profitable to vectorize.
         0           678                  Loop was not SIMD vectorized because it contains 
                                          operation in ((char *)P_buf  + ((long long) numPes * 
                                          8ll + (long long) (nrow_get * 2) * 
                                          4ll))->(int).rns43.[$$CIV13] + ((char *)P_buf  + 
                                          ((long long) numPes * 4ll + (long long) (nrow_get * 
                                          2) * 4ll))->(int).rns43.[$$CIV13] which is not  
                                          suitable for SIMD vectorization.
         0           678                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0           679                  Loop was not SIMD vectorized because it contains 
                                          operation in ((ncol_fw + ncol_bw) * ((char *)P_buf  + 
                                          ((long long) numPes * 4ll + (long long) (nrow_get * 
                                          2) * 4ll))->(int).rns43.[$$CIV13 + 1ll]) / 2 which is 
                                          not  suitable for SIMD vectorization.
         0           679                  Loop was not SIMD vectorized because it contains 
                                          unsupported vector data types.
         0           687             1    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           687            11    Loop was not SIMD vectorized because it contains 
                                          function calls.
        71           467            12    Loop was not SIMD vectorized because it contains 
                                          function calls.
        71           467            13    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           687            14    Loop was not SIMD vectorized because it contains 
                                          function calls.
        71           467            16    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           687            17    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           687            20    Loop was not SIMD vectorized because it contains 
                                          function calls.
        71           467            21    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           687            23    Loop was not SIMD vectorized because it contains 
                                          function calls.

   129 |  void void local_tournament<0>(double*, double*, int*, int, int, int)(char * A, long long *R, int *P, int n, int b, int lda_A)
   136 |  {
            guard___func__10 = 1;
   463 |    if (!(lda_A == n)) goto lab_8;
   464 |    __builtin_memcpy(R,A,(unsigned long long) (n * b) * 8ull);
   465 |    goto lab_9;
          lab_8:
   467 |    if (!(0 < b)) goto lab_10;
            $$CIV18 = 0ll;
            do {   /* id=1 guarded */ /* ~11 */ 
              /* region = 36 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)R  + 8ll * ($$CIV18 * (long long) n)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) n * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) b));    /* ~11 */
          lab_10:
   470 |  lab_9:
   141 |    cdgetrf(int, int, double*, int, int*, int*)(n,b,R,n,P,&info)
   463 |    if (!(lda_A == n)) goto lab_13;
   464 |    __builtin_memcpy(R,A,(unsigned long long) (n * b) * 8ull);
   465 |    goto lab_14;
          lab_13:
   467 |    if (!(0 < b)) goto lab_15;
            $$CIV18 = 0ll;
            do {   /* id=2 guarded */ /* ~16 */ 
              /* region = 37 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)R  + 8ll * ($$CIV18 * (long long) n)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) n * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) b));    /* ~16 */
          lab_15:
   470 |  lab_14:
    24 |    if (!(0 < b)) goto lab_21;
            if (!(0 < b)) goto lab_31;
            if (!1) goto lab_30;
            $$CIV1 = 0ll;
            do {   /* id=4 guarded */ /* ~22 */ 
              /* region = 39 */
              /* bump-normalized */
    25 |      if (!1) goto lab_23;
              $$CIV0 = 0ll;
              do {   /* id=5 guarded */ /* ~24 */ 
                /* region = 38 */
                /* bump-normalized */
    26 |        $$TVX.$$.swp22 = R[((long long) n * $$CIV0 + (long long) P[$$CIV1]) - 1ll];
    27 |        R[((long long) n * $$CIV0 + (long long) P[$$CIV1]) - 1ll] = R[$$CIV1 + (long long) n * $$CIV0];
    28 |        R[$$CIV1 + (long long) n * $$CIV0] = $$TVX.$$.swp22;
    25 |        $$CIV0 = $$CIV0 + 1ll;
              } while ((unsigned long long) $$CIV0 < (unsigned long long) ((long long) b));    /* ~24 */
            lab_23:
    24 |      $$CIV1 = $$CIV1 + 1ll;
            } while ((unsigned long long) $$CIV1 < (unsigned long long) ((long long) b));    /* ~22 */
          lab_30:
          lab_31:
          lab_21:
   151 |    if (!(n > b)) goto lab_2;
   121 |    if (!(1 < b)) goto lab_18;
            $$CIVA = 0ll;
            do {   /* id=3 guarded */ /* ~19 */ 
              /* region = 40 */
              /* bump-normalized */
   122 |      __builtin_memcpy(((char *)R  + (long long) b * ($$CIVA * 8ll + 8ll)),((char *)R  + (long long) n * ($$CIVA * 8ll + 8ll)),(unsigned long long) b * 8ull);
   121 |      $$CIVA = $$CIVA + 1ll;
            } while ((unsigned long long) $$CIVA < (unsigned long long) ((long long) b - 1ll));    /* ~19 */
          lab_18:
   152 |  lab_2:
   161 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
        71           467             1    Loop was not SIMD vectorized because it contains 
                                          function calls.
        71           467             2    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0            24             4    Loop was not SIMD vectorized because the loop is not 
                                          the innermost loop.
         0            26                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)R + (8ll)*(((long long) n 
                                          * $$CIV0 + (long long) P->(int).rns0.$$107[$$CIV1]) - 
                                          1ll)) with  non-vectorizable strides.
         0            26                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            27                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)R + (8ll)*(((long long) n 
                                          * $$CIV0 + (long long) P->(int).rns0.$$107[$$CIV1]) - 
                                          1ll)) with  non-vectorizable strides.
         0            27                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            27                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)R + 
                                          (8ll)*(((long long) n * $$CIV0 + (long long) 
                                          P->(int).rns0.$$107[$$CIV1]) - 1ll)).
         0            28                  Loop was not SIMD vectorized because it contains 
                                          memory references ((char *)R + (8ll)*($$CIV1 + (long 
                                          long) n * $$CIV0)) with  non-vectorizable strides.
         0            28                  Loop was not SIMD vectorized because the floating 
                                          point operation is not  vectorizable under -qstrict.
         0            28                  Loop was not SIMD vectorized because it contains 
                                          non-stride-one store  references ((char *)R + 
                                          (8ll)*($$CIV1 + (long long) n * $$CIV0)).
         0           121             3    Loop was not SIMD vectorized because it contains 
                                          function calls.

   129 |  void void local_tournament<1>(double*, double*, int*, int, int, int)(char * A, char * R, char * P, int n, int b, int lda_A)
   136 |  {
            guard___func__10 = 1;
   463 |    if (!(lda_A == n)) goto lab_14;
   464 |    __builtin_memcpy(R,A,(unsigned long long) (n * b) * 8ull);
   465 |    goto lab_15;
          lab_14:
   467 |    if (!(0 < b)) goto lab_16;
            $$CIV18 = 0ll;
            do {   /* id=2 guarded */ /* ~17 */ 
              /* region = 18 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)R  + 8ll * ($$CIV18 * (long long) n)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) n * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) b));    /* ~17 */
          lab_16:
   470 |  lab_15:
   141 |    cdgetrf(int, int, double*, int, int*, int*)(n,b,R,n,P,&info)
   463 |    if (!(lda_A == n)) goto lab_9;
   464 |    __builtin_memcpy(R,A,(unsigned long long) (n * b) * 8ull);
   465 |    goto lab_10;
          lab_9:
   467 |    if (!(0 < b)) goto lab_11;
            $$CIV18 = 0ll;
            do {   /* id=1 guarded */ /* ~12 */ 
              /* region = 19 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)R  + 8ll * ($$CIV18 * (long long) n)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) n * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) b));    /* ~12 */
          lab_11:
   470 |  lab_10:
   145 |    __assert_fail("0","tnmt_pvt.cxx",145u,&__func__)
            return;
   161 |  } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
        71           467             2    Loop was not SIMD vectorized because it contains 
                                          function calls.
        71           467             1    Loop was not SIMD vectorized because it contains 
                                          function calls.

   172 |  void coalesce_bwd(double const*, double*, double, int)(char * A1, char * A2, double ordering, int b)
   175 |  {
   177 |    if (!(ordering !=  0.0000000000000000E+000)) goto lab_1;
   178 |    if (!(b - 1 >= 0)) goto lab_5;
            $$CIV16 = 0ll;
            do {   /* id=2 guarded */ /* ~3 */ 
              /* region = 18 */
              /* bump-normalized */
   179 |      __builtin_memcpy(((char *)A2  + ((long long) b + 2ll * (((long long) (b - 1) - $$CIV16) * (long long) b)) * 8ll),((char *)A1  + ((long long) b * ((long long) (b - 1) - $$CIV16)) * 8ll),(unsigned long long) b * 8ull);
   180 |      if (!(0 != (int) ((long long) (b - 1) - $$CIV16))) goto lab_6;
              __builtin_memcpy(((char *)A2  + (2ll * (((long long) (b - 1) - $$CIV16) * (long long) b)) * 8ll),((char *)A2  + ((long long) b * ((long long) (b - 1) - $$CIV16)) * 8ll),(unsigned long long) b * 8ull);
            lab_6:
   178 |      $$CIV16 = $$CIV16 + 1ll;
            } while ((unsigned long long) $$CIV16 < (unsigned long long) ((long long) (b - 1) + 1ll));    /* ~3 */
          lab_5:
   182 |    goto lab_8;
          lab_1:
   183 |    if (!(b - 1 >= 0)) goto lab_11;
            $$CIV17 = 0ll;
            do {   /* id=1 guarded */ /* ~9 */ 
              /* region = 19 */
              /* bump-normalized */
   184 |      __builtin_memcpy(((char *)A2  + ((long long) b + 2ll * (((long long) (b - 1) - $$CIV17) * (long long) b)) * 8ll),((char *)A2  + ((long long) b * ((long long) (b - 1) - $$CIV17)) * 8ll),(unsigned long long) b * 8ull);
   185 |      __builtin_memcpy(((char *)A2  + (2ll * (((long long) (b - 1) - $$CIV17) * (long long) b)) * 8ll),((char *)A1  + ((long long) b * ((long long) (b - 1) - $$CIV17)) * 8ll),(unsigned long long) b * 8ull);
   183 |      $$CIV17 = $$CIV17 + 1ll;
            } while ((unsigned long long) $$CIV17 < (unsigned long long) ((long long) (b - 1) + 1ll));    /* ~9 */
          lab_11:
   187 |  lab_8:
   188 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
         0           178             2    Loop was not SIMD vectorized because it contains 
                                          function calls.
         0           183             1    Loop was not SIMD vectorized because it contains 
                                          function calls.

   460 |  void void lda_cpy<double>(int, int, int, int, double const*, double*)(int nrow, int ncol, int lda_A, int lda_B, char * A, char * B)
   462 |  {
   463 |    if (!(lda_A == nrow)) goto lab_1;
            if (!(lda_B == nrow)) goto lab_1;
   464 |    __builtin_memcpy(B,A,(unsigned long long) (nrow * ncol) * 8ull);
   465 |    goto lab_4;
          lab_1:
   467 |    if (!(0 < ncol)) goto lab_7;
            $$CIV18 = 0ll;
            do {   /* id=1 guarded */ /* ~5 */ 
              /* region = 13 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)B  + ((long long) lda_B * $$CIV18) * 8ll),((char *)A  + ((long long) lda_A * $$CIV18) * 8ll),(unsigned long long) nrow * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol));    /* ~5 */
          lab_7:
   470 |  lab_4:
   471 |    return;
          } /* function */ 



Source        Source        Loop Id       Action / Information                                      
File          Line                                                                                  
----------    ----------    ----------    ----------------------------------------------------------
        71           467             1    Loop was not SIMD vectorized because it contains 
                                          function calls.

          void __sinit65535()()
          {
    72 |    std::ios_base::Init::Init()(&__ioinit);
            __cxa_atexit(&__srterm__0(),NULL,&__dso_handle);
            return;
          } /* function */ 


          void __srterm__0()()
          {
    72 |    std::ios_base::Init::~Init()(&__ioinit);
            return;
          } /* function */ 


    17 |  void cdlaswp(int, double*, int, int, int, int const*, int)(int n, long long *A, int lda, int k1, int k2, int *IPIV, int inc)
    20 |  {
    24 |    if (!(k1 - 1 < k2)) goto lab_3;
            if (!(0 < n)) goto lab_24;
            if (!1) goto lab_23;
            $$CIV1 = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 17 */
              /* bump-normalized */
    25 |      if (!1) goto lab_6;
              $$CIV0 = 0ll;
              do {   /* id=2 guarded */ /* ~4 */ 
                /* region = 16 */
                /* bump-normalized */
    26 |        $$TVX.$$.swp00 = A[((long long) lda * $$CIV0 + (long long) IPIV[$$CIV1 + (long long) (k1 - 1)]) - 1ll];
    27 |        A[((long long) lda * $$CIV0 + (long long) IPIV[$$CIV1 + (long long) (k1 - 1)]) - 1ll] = A[($$CIV1 + (long long) (k1 - 1)) + (long long) lda * $$CIV0];
    28 |        A[($$CIV1 + (long long) (k1 - 1)) + (long long) lda * $$CIV0] = $$TVX.$$.swp00;
    25 |        $$CIV0 = $$CIV0 + 1ll;
              } while ((unsigned long long) $$CIV0 < (unsigned long long) ((long long) n));    /* ~4 */
            lab_6:
    24 |      $$CIV1 = $$CIV1 + 1ll;
            } while ((unsigned long long) $$CIV1 < (unsigned long long) ((long long) k2 - (long long) (k1 - 1)));    /* ~1 */
          lab_23:
          lab_24:
          lab_3:
    34 |    return;
          } /* function */ 


    36 |  void pivot_conv_direct(int, int const*, int*)(int n, int *P1, int *P2)
          {
    38 |    P2_cpy = malloc((unsigned long long) n * 4ull);
    39 |    __builtin_memcpy(P2_cpy,P2,(unsigned long long) n * 4ull);
    40 |    if (!(0 < n)) goto lab_3;
            $$CIV2 = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 9 */
              /* bump-normalized */
    41 |      P2[$$CIV2] = P2_cpy[(long long) P1[$$CIV2]];
    40 |      $$CIV2 = $$CIV2 + 1ll;
            } while ((unsigned long long) $$CIV2 < (unsigned long long) ((long long) n));    /* ~1 */
          lab_3:
    43 |    free(P2_cpy)
    44 |    return;
          } /* function */ 


    46 |  void pivot_conv(int, int const*, int*)(int n, int *P1, int *P2)
          {
    48 |    if (!(0 < n)) goto lab_3;
            $$CIV3 = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 9 */
              /* bump-normalized */
    49 |      tmp = P2[(long long) (P1[$$CIV3] - 1)];
    50 |      P2[(long long) (P1[$$CIV3] - 1)] = P2[$$CIV3];
    51 |      P2[$$CIV3] = tmp;
    48 |      $$CIV3 = $$CIV3 + 1ll;
            } while ((unsigned long long) $$CIV3 < (unsigned long long) ((long long) n));    /* ~1 */
          lab_3:
    53 |    return;
          } /* function */ 


    55 |  void pivot_mat(int, int, int const*, double const*, double*)(int nrow, int ncol, int *P, long long *A, long long *B)
          {
    57 |    if (!(0 < ncol)) goto lab_3;
            if (!(0 < nrow)) goto lab_24;
            if (!1) goto lab_23;
            $$CIV5 = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 17 */
              /* bump-normalized */
    58 |      if (!1) goto lab_6;
              $$CIV4 = 0ll;
              do {   /* id=2 guarded */ /* ~4 */ 
                /* region = 16 */
                /* bump-normalized */
    59 |        B[(long long) nrow * $$CIV5 + $$CIV4] = A[(long long) (nrow * (int) $$CIV5 + P[$$CIV4])];
    58 |        $$CIV4 = $$CIV4 + 1ll;
              } while ((unsigned long long) $$CIV4 < (unsigned long long) ((long long) nrow));    /* ~4 */
            lab_6:
    57 |      $$CIV5 = $$CIV5 + 1ll;
            } while ((unsigned long long) $$CIV5 < (unsigned long long) ((long long) ncol));    /* ~1 */
          lab_23:
          lab_24:
          lab_3:
    62 |    return;
          } /* function */ 


    66 |  void br_to_pivot(int, int, int const*, int*)(int nbr, int lda, int *P_br, int *P)
          {
            guard___func__7 = 1;
    68 |    __builtin_memset(P,0,(unsigned long long) nbr * 4ull);
    69 |    if (!(0 < nbr)) goto lab_4;
            $$CIV6 = 0ll;
            do {   /* id=5 guarded */ /* ~2 */ 
              /* region = 39 */
              /* bump-normalized */
    70 |      if (!(P_br[$$CIV6] < nbr)) goto lab_5;
              P[(long long) P_br[$$CIV6]] = -1;
            lab_5:
    69 |      $$CIV6 = $$CIV6 + 1ll;
            } while ((unsigned long long) $$CIV6 < (unsigned long long) ((long long) nbr));    /* ~2 */
          lab_4:
    72 |    if (!(nbr < lda)) goto lab_9;
            $$CIV7 = 0ll;
            do {   /* id=4 guarded */ /* ~7 */ 
              /* region = 40 */
              /* bump-normalized */
              /* independent */
    73 |      P[(long long) ((long long) nbr + $$CIV7)] = (int) ((long long) nbr + $$CIV7);
    72 |      $$CIV7 = $$CIV7 + 1ll;
            } while ((unsigned long long) $$CIV7 < (unsigned long long) ((long long) lda - (long long) nbr));    /* ~7 */
          lab_9:
    76 |    if (!(0 < nbr)) goto lab_12;
    75 |    i.rnnC = 0;
            j = 0;
    76 |    do {   /* id=1 guarded */ /* ~10 */ 
              /* region = 43 */
    77 |      if (!(i.rnnC < nbr)) goto lab_16;
              if (!(P[(long long) i.rnnC] == -1)) goto lab_16;
              do {   /* id=3 guarded */ /* ~14 */ 
                /* region = 41 */
                i.rnnC = i.rnnC + 1;
                if (!(i.rnnC < nbr)) goto lab_16;
              } while (P[(long long) i.rnnC] == -1);    /* ~14 */
            lab_16:
    78 |      if (!(j < nbr)) goto lab_21;
              if (!(P_br[(long long) j] < nbr)) goto lab_21;
              do {   /* id=2 guarded */ /* ~19 */ 
                /* region = 42 */
                j = j + 1;
                if (!(j < nbr)) goto lab_21;
              } while (P_br[(long long) j] < nbr);    /* ~19 */
            lab_21:
    79 |      if (!(i.rnnC < nbr)) goto lab_27;
              if (j < nbr) goto lab_26;
            lab_27:
              if (!(i.rnnC == nbr)) goto lab_25;
              if (!(j == nbr)) goto lab_25;
            lab_26:
    80 |      if (!(i.rnnC < nbr)) goto lab_30;
    81 |      P[(long long) P_br[(long long) j]] = i.rnnC;
    82 |      i.rnnC = i.rnnC + 1;
              j = j + 1;
    83 |    lab_30:
    76 |      if (!(i.rnnC < nbr)) goto lab_12;
            } while (j < nbr);    /* ~10 */
          lab_12:
    85 |    __builtin_memcpy(P,P_br,(unsigned long long) nbr * 4ull);
    86 |    goto lab_36;
    79 |  lab_25:
            __assert_fail("(i<nbr && j<nbr) || (i==nbr && j==nbr)","tnmt_pvt.cxx",79u,&__func__)
          lab_36:
            return;
    86 |  } /* function */ 


    89 |  void inv_br(int, int, int const*, int*, int*)(int nbr, int off, int *P_br, int *P, int *P_loc)
    93 |  {
            guard___func__8 = 1;
   700 |    if (!(0ll != (long long) nbr * 4ll)) goto lab_4;
   737 |    $$CIV8 = 0ll;
   700 |    do {   /* id=5 guarded */ /* ~2 */ 
              /* region = 54 */
              /* bump-normalized */
              /* independent */
   702 |      P[$$CIV8] = -1;
   701 |      $$CIV8 = $$CIV8 + 1ll;
            } while ((unsigned long long) $$CIV8 < (unsigned long long) (((long long) nbr * 4ll) / 4ll));    /* ~2 */
          lab_4:
    96 |    if (!(0 < nbr)) goto lab_88;
            if (!(P_loc != NULL)) goto lab_66;
            if (!1) goto lab_65;
            $$CIV9 = 0ll;
            do {   /* id=4 guarded */ /* ~5 */ 
              /* region = 55 */
              /* bump-normalized */
    97 |      $$csx0 = P_br[$$CIV9];
              if (!($$csx0 < nbr + off)) goto lab_8;
    98 |      P[(long long) ($$csx0 - off)] = $$csx0;
   100 |      P_loc[$$CIV9] = P_br[$$CIV9] - off;
   101 |      goto lab_12;
            lab_8:
   102 |      P_loc[$$CIV9] = (int) $$CIV9;
   103 |    lab_12:
   104 |      if (!(P_br[$$CIV9] >= off)) goto lab_16;
    96 |      $$CIV9 = $$CIV9 + 1ll;
            } while ((unsigned long long) $$CIV9 < (unsigned long long) ((long long) nbr));    /* ~5 */
          lab_65:
            goto lab_7;
          lab_66:
            if (!1) goto lab_73;
            $$CIV9 = 0ll;
            do {   /* id=6 guarded */ /* ~68 */ 
              /* region = 59 */
              /* bump-normalized */
    97 |      if (!(P_br[$$CIV9] < nbr + off)) goto lab_70;
    98 |      P[(long long) (P_br[$$CIV9] - off)] = P_br[$$CIV9];
   101 |      goto lab_72;
            lab_70:
   103 |    lab_72:
   104 |      if (!(P_br[$$CIV9] >= off)) goto lab_16;
    96 |      $$CIV9 = $$CIV9 + 1ll;
            } while ((unsigned long long) $$CIV9 < (unsigned long long) ((long long) nbr));    /* ~68 */
          lab_73:
            goto lab_7;
          lab_88:
            goto lab_20;
          lab_7:
   106 |    i.rnn11 = 0;
            j = 0;
   107 |    do {   /* id=1 guarded */ /* ~18 */ 
              /* region = 58 */
   108 |      if (!(i.rnn11 < nbr)) goto lab_24;
              if (!(P[(long long) i.rnn11] != -1)) goto lab_24;
              do {   /* id=3 guarded */ /* ~22 */ 
                /* region = 56 */
                i.rnn11 = i.rnn11 + 1;
                if (!(i.rnn11 < nbr)) goto lab_24;
              } while (P[(long long) i.rnn11] != -1);    /* ~22 */
            lab_24:
   109 |      if (!(j < nbr)) goto lab_29;
              if (!(P_br[(long long) j] < nbr + off)) goto lab_29;
              do {   /* id=2 guarded */ /* ~27 */ 
                /* region = 57 */
                j = j + 1;
                if (!(j < nbr)) goto lab_29;
              } while (P_br[(long long) j] < nbr + off);    /* ~27 */
            lab_29:
   110 |      if (!(i.rnn11 < nbr)) goto lab_35;
              if (j < nbr) goto lab_34;
            lab_35:
              if (!(i.rnn11 == nbr)) goto lab_33;
              if (!(j == nbr)) goto lab_33;
            lab_34:
   111 |      if (!(i.rnn11 < nbr)) goto lab_38;
   112 |      P[(long long) i.rnn11] = P_br[(long long) j];
   113 |      i.rnn11 = i.rnn11 + 1;
              j = j + 1;
   114 |    lab_38:
   107 |      if (!(i.rnn11 < nbr)) goto lab_20;
            } while (j < nbr);    /* ~18 */
          lab_20:
   116 |    goto lab_44;
   110 |  lab_33:
            __assert_fail("(i<nbr && j<nbr) || (i==nbr && j==nbr)","tnmt_pvt.cxx",110u,&__func__)
            goto lab_44;
   104 |  lab_16:
            __assert_fail("P_br[i] >= off","tnmt_pvt.cxx",104u,&__func__)
          lab_44:
            return;
   116 |  } /* function */ 


   119 |  void pack_bwd(double*, int, int, int)(char * A, int nrow, int lda, int ncol)
          {
   121 |    if (!(1 < ncol)) goto lab_3;
            $$CIVA = 0ll;
            do {   /* id=1 guarded */ /* ~1 */ 
              /* region = 9 */
              /* bump-normalized */
   122 |      __builtin_memcpy(((char *)A  + ((long long) nrow * ($$CIVA + 1ll)) * 8ll),((char *)A  + ((long long) lda * ($$CIVA + 1ll)) * 8ll),(unsigned long long) nrow * 8ull);
   121 |      $$CIVA = $$CIVA + 1ll;
            } while ((unsigned long long) $$CIVA < (unsigned long long) ((long long) ncol - 1ll));    /* ~1 */
          lab_3:
   124 |    return;
          } /* function */ 


   192 |  void tnmt_pvt_1d(double*, double*, int*, double*, int*, int, int, int, int, int, CommData)(char * R, long long *R_out, char * P_in, char * R_buf, int *P_out, int b, int myRank, int pe_start, int numPes, int root, aggr20 cdt)
   204 |  {
            __es.__l@0 = 0;
            __es.__t@8 = &__fsm_tab;
            __es.__this@10 = NULL;
            __es.__i@18 = 0;
   218 |    if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) >= 0)) goto lab_6;
   219 |    __builtin_memcpy(P_out,P_in,(unsigned long long) b * 4ull);
   220 |    if (!(numPes == 1)) goto lab_8;
   221 |    __builtin_memcpy(R_out,R,(unsigned long long) (b * b) * 8ull);
   223 |    goto lab_60;
   224 |  lab_8:
   225 |    R_curr = R;
   226 |  lab_6:
   227 |    CTF_Timer::CTF_Timer(char const*)(&t,"tnmt_pvt_1d");
            __es.__c4@3 = 1u;
            CTF_Timer::start()(&t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&t);
   231 |    if (!(numPes > 1)) goto lab_18;
            np = numPes;
            if (!(0 < b)) goto lab_85;
            if (!1) goto lab_86;
            if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) >= 0)) goto lab_119;
            if (!1) goto lab_118;
            do {   /* id=1 guarded */ /* ~16 */ 
              /* region = 125 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_21;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_19;
            lab_21:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_19;
   239 |      if (0 == np % 2) goto lab_27;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_26;
            lab_27:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_26:
   244 |      goto lab_35;
            lab_19:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np / 2)) goto lab_36;
   247 |      comm_pe = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (np + 1) / 2 >= pe_start + (numPes - root) ? (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (root - numPes)) : (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root));
   251 |      MPI_Irecv(R_buf,b * b,1275070475,comm_pe,0,cdt.cm@0,&req);
   252 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   254 |      MPI_Irecv(((char *)P_out  + (long long) b * 4ll),b,1275069445,comm_pe,0,cdt.cm@0,&req);
   255 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 5u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   256 |      coalesce_bwd(double const*, double*, double, int)(R_curr,R_buf, 0.0000000000000000E+000,b)
   136 |      guard___func__10 = 1;
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   141 |      cdgetrf(int, int, double*, int, int*, int*)(b * 2,b,R_out,b * 2,((char *)P_out  + (long long) (b * 2) * 4ll),&info)
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
    24 |      if (!1) goto lab_74;
              $$CIV1 = 0ll;
              do {   /* id=5 guarded */ /* ~75 */ 
                /* region = 124 */
                /* bump-normalized */
    25 |        if (!1) goto lab_76;
                $$CIV0 = 0ll;
                do {   /* id=6 guarded */ /* ~77 */ 
                  /* region = 123 */
                  /* bump-normalized */
    26 |          $$TVX.$$.swp11 = R_out[((long long) (b * 2) * $$CIV0 + (long long) ((int *)(((char *)P_out  + (long long) (b * 2) * 4ll)))[$$CIV1]) - 1ll];
    27 |          R_out[((long long) (b * 2) * $$CIV0 + (long long) ((int *)(((char *)P_out  + (long long) (b * 2) * 4ll)))[$$CIV1]) - 1ll] = R_out[$$CIV1 + (long long) (b * 2) * $$CIV0];
    28 |          R_out[$$CIV1 + (long long) (b * 2) * $$CIV0] = $$TVX.$$.swp11;
    25 |          $$CIV0 = $$CIV0 + 1ll;
                } while ((unsigned long long) $$CIV0 < (unsigned long long) ((long long) b));    /* ~77 */
              lab_76:
    24 |        $$CIV1 = $$CIV1 + 1ll;
              } while ((unsigned long long) $$CIV1 < (unsigned long long) ((long long) b));    /* ~75 */
            lab_74:
   151 |      if (!(b * 2 > b)) goto lab_79;
   121 |      if (!(1 < b)) goto lab_80;
              $$CIVA = 0ll;
              do {   /* id=7 guarded */ /* ~81 */ 
                /* region = 121 */
                /* bump-normalized */
   122 |        __builtin_memcpy(((char *)R_out  + (long long) b * ($$CIVA * 8ll + 8ll)),((char *)R_out  + (long long) (b * 2) * ($$CIVA * 8ll + 8ll)),(unsigned long long) b * 8ull);
   121 |        $$CIVA = $$CIVA + 1ll;
              } while ((unsigned long long) $$CIVA < (unsigned long long) ((long long) b - 1ll));    /* ~81 */
            lab_80:
   152 |    lab_79:
    48 |      if (!1) goto lab_61;
              $$CIV3 = 0ll;
              do {   /* id=2 guarded */ /* ~62 */ 
                /* region = 122 */
                /* bump-normalized */
    49 |        tmp = P_out[(long long) (((int *)(((char *)P_out  + (long long) (b * 2) * 4ll)))[$$CIV3] - 1)];
    50 |        P_out[(long long) (((int *)(((char *)P_out  + (long long) (b * 2) * 4ll)))[$$CIV3] - 1)] = P_out[$$CIV3];
    51 |        P_out[$$CIV3] = tmp;
    48 |        $$CIV3 = $$CIV3 + 1ll;
              } while ((unsigned long long) $$CIV3 < (unsigned long long) ((long long) b));    /* ~62 */
            lab_61:
   262 |      R_curr = R_out;
   263 |    lab_36:
            lab_35:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~16 */
          lab_118:
            goto lab_86;
          lab_119:
            if (!1) goto lab_137;
            do {   /* id=3 guarded */ /* ~121 */ 
              /* region = 126 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_122;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_125;
            lab_122:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_125;
   239 |      if (0 == np % 2) goto lab_123;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_124;
            lab_123:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_124:
   244 |      goto lab_136;
            lab_125:
   263 |    lab_136:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~121 */
          lab_137:
            goto lab_86;
          lab_85:
            if (!1) goto lab_103;
            if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) >= 0)) goto lab_105;
            if (!1) goto lab_106;
            if (!(b * 2 > b)) goto lab_138;
            if (!(1 < b)) goto lab_150;
            do {   /* id=4 guarded */ /* ~87 */ 
              /* region = 128 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_88;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_91;
            lab_88:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_91;
   239 |      if (0 == np % 2) goto lab_89;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_90;
            lab_89:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_90:
   244 |      goto lab_102;
            lab_91:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np / 2)) goto lab_101;
   247 |      comm_pe = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (np + 1) / 2 >= pe_start + (numPes - root) ? (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (root - numPes)) : (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root));
   251 |      MPI_Irecv(R_buf,b * b,1275070475,comm_pe,0,cdt.cm@0,&req);
   252 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   254 |      MPI_Irecv(((char *)P_out  + (long long) b * 4ll),b,1275069445,comm_pe,0,cdt.cm@0,&req);
   255 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 5u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   256 |      coalesce_bwd(double const*, double*, double, int)(R_curr,R_buf, 0.0000000000000000E+000,b)
   136 |      guard___func__10 = 1;
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   141 |      cdgetrf(int, int, double*, int, int*, int*)(b * 2,b,R_out,b * 2,((char *)P_out  + (long long) (b * 2) * 4ll),&info)
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   121 |      if (!1) goto lab_97;
              $$CIVA = 0ll;
              do {   /* id=9 guarded */ /* ~96 */ 
                /* region = 127 */
                /* bump-normalized */
   122 |        __builtin_memcpy(((char *)R_out  + (long long) b * ($$CIVA * 8ll + 8ll)),((char *)R_out  + (long long) (b * 2) * ($$CIVA * 8ll + 8ll)),(unsigned long long) b * 8ull);
   121 |        $$CIVA = $$CIVA + 1ll;
              } while ((unsigned long long) $$CIVA < (unsigned long long) ((long long) b - 1ll));    /* ~96 */
            lab_97:
   262 |      R_curr = R_out;
   263 |    lab_101:
            lab_102:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~87 */
            goto lab_106;
          lab_150:
            do {   /* id=12 guarded */ /* ~152 */ 
              /* region = 129 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_153;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_156;
            lab_153:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_156;
   239 |      if (0 == np % 2) goto lab_154;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_155;
            lab_154:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_155:
   244 |      goto lab_161;
            lab_156:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np / 2)) goto lab_160;
   247 |      comm_pe = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (np + 1) / 2 >= pe_start + (numPes - root) ? (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (root - numPes)) : (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root));
   251 |      MPI_Irecv(R_buf,b * b,1275070475,comm_pe,0,cdt.cm@0,&req);
   252 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   254 |      MPI_Irecv(((char *)P_out  + (long long) b * 4ll),b,1275069445,comm_pe,0,cdt.cm@0,&req);
   255 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 5u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   256 |      coalesce_bwd(double const*, double*, double, int)(R_curr,R_buf, 0.0000000000000000E+000,b)
   136 |      guard___func__10 = 1;
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   141 |      cdgetrf(int, int, double*, int, int*, int*)(b * 2,b,R_out,b * 2,((char *)P_out  + (long long) (b * 2) * 4ll),&info)
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   262 |      R_curr = R_out;
   263 |    lab_160:
            lab_161:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~152 */
            goto lab_106;
          lab_138:
            do {   /* id=14 guarded */ /* ~140 */ 
              /* region = 130 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_141;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_144;
            lab_141:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_144;
   239 |      if (0 == np % 2) goto lab_142;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_143;
            lab_142:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_143:
   244 |      goto lab_149;
            lab_144:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np / 2)) goto lab_148;
   247 |      comm_pe = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (np + 1) / 2 >= pe_start + (numPes - root) ? (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + (root - numPes)) : (np + 1) / 2 + ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root));
   251 |      MPI_Irecv(R_buf,b * b,1275070475,comm_pe,0,cdt.cm@0,&req);
   252 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   254 |      MPI_Irecv(((char *)P_out  + (long long) b * 4ll),b,1275069445,comm_pe,0,cdt.cm@0,&req);
   255 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Wait");
              __es.__c4@3 = 5u;
              CTF_Timer::start()(&__t)
              PMPI_Wait(&req,&stat);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   256 |      coalesce_bwd(double const*, double*, double, int)(R_curr,R_buf, 0.0000000000000000E+000,b)
   136 |      guard___func__10 = 1;
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   141 |      cdgetrf(int, int, double*, int, int*, int*)(b * 2,b,R_out,b * 2,((char *)P_out  + (long long) (b * 2) * 4ll),&info)
   464 |      __builtin_memcpy(R_out,R_buf,(unsigned long long) (2 * (b * b)) * 8ull);
   262 |      R_curr = R_out;
   263 |    lab_148:
            lab_149:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~140 */
            goto lab_106;
          lab_105:
            if (!1) goto lab_117;
            do {   /* id=10 guarded */ /* ~107 */ 
              /* region = 131 */
   233 |      if ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) > np / 2) goto lab_108;
              if (!(np == (myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) * 2)) goto lab_111;
            lab_108:
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) < np)) goto lab_111;
   239 |      if (0 == np % 2) goto lab_109;
              if (!((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) != np / 2)) goto lab_110;
            lab_109:
   236 |      comm_pe.rnn1A = ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) - (np + 1) / 2 >= pe_start + (numPes - root) ? ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (numPes + (np + 1) / 2) : ((myRank < pe_start ? -1 : (myRank - root < 0 ? myRank + (numPes - root) : myRank - root)) + root) - (np + 1) / 2);
   241 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Send(R_curr,b * b,1275070475,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   242 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Send");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Send(P_out,b,1275069445,comm_pe.rnn1A,0,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   243 |    lab_110:
   244 |      goto lab_116;
            lab_111:
   263 |    lab_116:
   265 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Barrier");
              __es.__c4@3 = 6u;
              CTF_Timer::start()(&__t)
              PMPI_Barrier(cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   231 |      np = np % 2 + np / 2;
            } while (np > 1);    /* ~107 */
          lab_117:
          lab_106:
          lab_103:
          lab_86:
          lab_18:
   267 |    CTF_Timer::CTF_Timer(char const*)(&t,"tnmt_pvt_1d");
            __es.__c4@3 = 7u;
            CTF_Timer::stop()(&t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&t);
   268 |  lab_60:
            return;
          } /* function */ 


   421 |  void par_pivot(double*, double*, int, int, int, int, int, int, int*, int*, int, int, int, int, int, int, int, CommData, CommData, int*, int, int)(long long *A, long long *buffer, int npiv, int ncol, int b, int lda_A, int idx_off, int glb_off, int *P_r, int *P_app, int myRank, int lrRank, int numPes, int numLrs, int root, int st_blk, int num_blk, aggr20 cdt_col, aggr20 cdt_kdir, char * pvt_buffer, int is_tnmt_pvt, int nloaded)
   444 |  {
            __es.__l@0 = 0;
            __es.__t@8 = &__fsm_tab;
            __es.__this@10 = NULL;
            __es.__i@18 = 0;
   448 |    if (!(myRank == root)) goto lab_1;
   452 |    if (!(is_tnmt_pvt != 0)) goto lab_6;
   453 |    inv_br(int, int, int const*, int*, int*)(npiv,glb_off,P_app,((char *)P_app  + (long long) npiv * 4ll),pvt_buffer)
            goto lab_8;
          lab_6:
   455 |    __builtin_memcpy(((char *)P_app  + (long long) npiv * 4ll),P_app,(unsigned long long) npiv * 4ull);
          lab_8:
   458 |    __builtin_memcpy(((char *)P_app  + (long long) (npiv * 2) * 4ll),P_r,(unsigned long long) npiv * 4ull);
   463 |    if (!(lda_A == npiv)) goto lab_80;
   464 |    __builtin_memcpy(buffer,A,(unsigned long long) (npiv * ncol) * 8ull);
   465 |    goto lab_81;
          lab_80:
   467 |    if (!(0 < ncol)) goto lab_82;
            $$CIV18 = 0ll;
            do {   /* id=8 guarded */ /* ~83 */ 
              /* region = 84 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)buffer  + 8ll * ($$CIV18 * (long long) npiv)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) npiv * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol));    /* ~83 */
          lab_82:
   470 |  lab_81:
   460 |  lab_1:
   463 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Bcast");
            __es.__c4@3 = 1u;
            CTF_Timer::start()(&__t)
            PMPI_Bcast(((char *)P_app  + (long long) npiv * 4ll),npiv * 2,1275069445,root,cdt_col.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   464 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Bcast");
            __es.__c4@3 = 2u;
            CTF_Timer::start()(&__t)
            PMPI_Bcast(buffer,npiv * ncol,1275070475,root,cdt_col.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   473 |    if (!(0 < npiv)) goto lab_26;
            if (!(0 < ncol)) goto lab_108;
            if (!1) goto lab_89;
            $$CIVF = 0ll;
            do {   /* id=1 guarded */ /* ~24 */ 
              /* region = 90 */
              /* bump-normalized */
   478 |      if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) >= b * myRank)) goto lab_27;
              if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) < (myRank + 1) * b)) goto lab_27;
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) >= st_blk)) goto lab_27;
   474 |      row_dest = P_app[(long long) npiv + $$CIVF];
   475 |      row_mod = P_app[(long long) npiv + $$CIVF] % (b * numPes);
   476 |      row_blk = P_app[(long long) npiv + $$CIVF] / (b * numPes);
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) < st_blk + num_blk)) goto lab_27;
   481 |      $$csx1 = (long long) ((b * (P_app[(long long) npiv + $$CIVF] / (b * numPes)) + P_app[(long long) npiv + $$CIVF] % (b * numPes)) - (idx_off + b * myRank));
              P_app[$$CIVF] = P_r[$$csx1];
   495 |      if (!1) goto lab_34;
              $$CIVB = 0ll;
              do {   /* id=6 guarded */ /* ~32 */ 
                /* region = 88 */
                /* bump-normalized */
   496 |        ((double *)(((char *)buffer  + (long long) (npiv * ncol) * 8ll)))[$$CIVF + (long long) npiv * $$CIVB] = A[(long long) lda_A * $$CIVB + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank))];
   495 |        $$CIVB = $$CIVB + 1ll;
              } while ((unsigned long long) $$CIVB < (unsigned long long) ((long long) ncol));    /* ~32 */
            lab_34:
   500 |      r = (int) $$CIVF;
   501 |      if (!(row_dest - glb_off >= npiv)) goto lab_35;
   502 |      do {   /* id=4 */ /* ~37 */ 
                /* region = 86 */
   504 |        if (!1) goto lab_42;
                $$CIVC = 0ll;
                do {   /* id=5 guarded */ /* ~40 */ 
                  /* region = 85 */
                  /* bump-normalized */
   505 |          if (P_app[(long long) npiv + $$CIVC] == r + glb_off) goto lab_63;
   504 |          $$CIVC = $$CIVC + 1ll;
                } while ((unsigned long long) $$CIVC < (unsigned long long) ((long long) npiv));    /* ~40 */
              lab_42:
   503 |        isv.rnn1E = 1;
   504 |        goto lab_65;
   505 |      lab_63:
   506 |        isv.rnn1E = 0;
   507 |        r = (int) $$CIVC;
   504 |      lab_65:
   511 |      } while (isv.rnn1E == 0);    /* ~37 */
   512 |    lab_35:
   513 |      P_r[$$csx1] = P_app[(long long) (npiv * 2 + r)];
   529 |      if (!1) goto lab_47;
              $$CIVD = 0ll;
              do {   /* id=3 guarded */ /* ~45 */ 
                /* region = 87 */
                /* bump-normalized */
   530 |        A[(long long) lda_A * $$CIVD + (((long long) b * (long long) row_blk + (long long) row_mod) - ((long long) idx_off + (long long) b * (long long) myRank))] = buffer[(long long) r + (long long) npiv * $$CIVD];
   529 |        $$CIVD = $$CIVD + 1ll;
              } while ((unsigned long long) $$CIVD < (unsigned long long) ((long long) ncol));    /* ~45 */
            lab_47:
   534 |      goto lab_48;
            lab_27:
   537 |      P_app[$$CIVF] = 0;
   538 |      if (!1) goto lab_51;
              $$CIVE = 0ll;
              do {   /* id=2 guarded */ /* ~49 */ 
                /* region = 89 */
                /* bump-normalized */
                /* independent */
   539 |        ((double *)(((char *)buffer  + (long long) (npiv * ncol) * 8ll)))[$$CIVF + (long long) npiv * $$CIVE] =  0.0000000000000000E+000;
   538 |        $$CIVE = $$CIVE + 1ll;
              } while ((unsigned long long) $$CIVE < (unsigned long long) ((long long) ncol));    /* ~49 */
            lab_51:
   541 |    lab_48:
   473 |      $$CIVF = $$CIVF + 1ll;
            } while ((unsigned long long) $$CIVF < (unsigned long long) ((long long) npiv));    /* ~24 */
          lab_89:
            goto lab_109;
          lab_108:
            if (!1) goto lab_125;
            $$CIVF = 0ll;
            do {   /* id=15 guarded */ /* ~110 */ 
              /* region = 93 */
              /* bump-normalized */
   478 |      if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) >= b * myRank)) goto lab_121;
              if (!(P_app[(long long) npiv + $$CIVF] % (b * numPes) < (myRank + 1) * b)) goto lab_121;
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) >= st_blk)) goto lab_121;
   474 |      row_dest = P_app[(long long) npiv + $$CIVF];
   475 |      row_mod = P_app[(long long) npiv + $$CIVF] % (b * numPes);
   476 |      row_blk = P_app[(long long) npiv + $$CIVF] / (b * numPes);
   479 |      if (!(P_app[(long long) npiv + $$CIVF] / (b * numPes) < st_blk + num_blk)) goto lab_121;
   481 |      $$csx2 = (long long) ((b * (P_app[(long long) npiv + $$CIVF] / (b * numPes)) + P_app[(long long) npiv + $$CIVF] % (b * numPes)) - (idx_off + b * myRank));
              P_app[$$CIVF] = P_r[$$csx2];
   500 |      r = (int) $$CIVF;
   501 |      if (!(row_dest - glb_off >= npiv)) goto lab_118;
   502 |      do {   /* id=17 */ /* ~113 */ 
                /* region = 92 */
   504 |        if (!1) goto lab_115;
                $$CIVC = 0ll;
                do {   /* id=18 guarded */ /* ~114 */ 
                  /* region = 91 */
                  /* bump-normalized */
   505 |          if (P_app[(long long) npiv + $$CIVC] == r + glb_off) goto lab_116;
   504 |          $$CIVC = $$CIVC + 1ll;
                } while ((unsigned long long) $$CIVC < (unsigned long long) ((long long) npiv));    /* ~114 */
              lab_115:
   503 |        isv.rnn1E = 1;
   504 |        goto lab_117;
   505 |      lab_116:
   506 |        isv.rnn1E = 0;
   507 |        r = (int) $$CIVC;
   504 |      lab_117:
   511 |      } while (isv.rnn1E == 0);    /* ~113 */
   512 |    lab_118:
   513 |      P_r[$$csx2] = P_app[(long long) (npiv * 2 + r)];
   534 |      goto lab_124;
            lab_121:
   537 |      P_app[$$CIVF] = 0;
   541 |    lab_124:
   473 |      $$CIVF = $$CIVF + 1ll;
            } while ((unsigned long long) $$CIVF < (unsigned long long) ((long long) npiv));    /* ~110 */
          lab_125:
          lab_109:
          lab_26:
   559 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Reduce");
            __es.__c4@3 = 3u;
            CTF_Timer::start()(&__t)
            PMPI_Reduce(((char *)buffer  + (long long) (npiv * ncol) * 8ll),buffer,npiv * ncol,1275070475,1476395011,root,cdt_col.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   560 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Reduce");
            __es.__c4@3 = 4u;
            CTF_Timer::start()(&__t)
            PMPI_Reduce(P_app,((char *)P_app  + (long long) (npiv * 2) * 4ll),npiv,1275069445,1476395011,root,cdt_col.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   562 |    if (!(myRank == root)) goto lab_58;
   563 |    __builtin_memcpy(P_r,((char *)P_app  + (long long) (npiv * 2) * 4ll),(unsigned long long) npiv * 4ull);
   463 |    if (!(lda_A == npiv)) goto lab_75;
   464 |    __builtin_memcpy(A,buffer,(unsigned long long) (npiv * ncol) * 8ull);
   465 |    goto lab_76;
          lab_75:
   467 |    if (!(0 < ncol)) goto lab_77;
            $$CIV18 = 0ll;
            do {   /* id=7 guarded */ /* ~78 */ 
              /* region = 94 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),((char *)buffer  + 8ll * ($$CIV18 * (long long) npiv)),(unsigned long long) npiv * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol));    /* ~78 */
          lab_77:
   470 |  lab_76:
   565 |  lab_58:
   566 |    return;
          } /* function */ 


   572 |  void pvt_collc(double*, double*, double*, int, int, int, int, int, int, int, int*, int*, int*, int, int, CommData)(char * A_fw, char * A_bw, char * buffer, int b, int nrow, int ncol_fw, int ncol_bw, int lda_A, int idx_off, int glb_off, int *P_r, int *P_mine, int *P_buf, int myRank, int numPes, aggr20 cdt)
   587 |  {
            __es.__l@0 = 0;
            __es.__t@8 = &__fsm_tab;
            __es.__this@10 = NULL;
            __es.__i@18 = 0;
   604 |    nrow_get = 0;
   606 |    if (!(b > 0)) goto lab_155;
            if (!(0 < nrow)) goto lab_3;
            $$CIV10 = 0ll;
            $$DMSRR0 = (int) ((int) 0 + (int) 0ll * 1) % b;
            $$DMSRQ0 = (int) ((int) 0 + (int) 0ll * 1) / b;
            do {   /* id=6 guarded */ /* ~1 */ 
              /* region = 134 */
              /* bump-normalized */
   608 |      if (!(0 != ($$DMSRR0 + ($$DMSRQ0 * (b * numPes) - P_mine[$$CIV10])) + (b * myRank + glb_off))) goto lab_4;
   609 |      P_buf[(long long) (nrow_get * 2)] = P_mine[$$CIV10];
   610 |      P_buf[(long long) (nrow_get * 2 + 1)] = (int) $$CIV10;
   611 |      nrow_get = nrow_get + 1;
   612 |    lab_4:
   613 |      $$DMSRR0 = $$DMSRR0 + (int) 1;
              if (!($$DMSRR0 >= (1 / b) * b + b)) goto lab_160;
              $$DMSRR0 = $$DMSRR0 + - b;
              $$DMSRQ0 = $$DMSRQ0 + 1;
            lab_160:
              $$DMSRR0 = $$DMSRR0 + - ((1 / b) * b);
              $$DMSRQ0 = $$DMSRQ0 + 1 / b;
   606 |      $$CIV10 = $$CIV10 + 1ll;
            } while ((unsigned long long) $$CIV10 < (unsigned long long) ((long long) nrow));    /* ~1 */
          lab_3:
            goto lab_156;
          lab_155:
            if (!(0 < nrow)) goto lab_159;
            $$CIV10 = 0ll;
            do {   /* id=25 guarded */ /* ~157 */ 
              /* region = 135 */
              /* bump-normalized */
   608 |      if (!(0 != ((int) $$CIV10 % b + (((int) $$CIV10 / b) * (b * numPes) - P_mine[$$CIV10])) + (b * myRank + glb_off))) goto lab_158;
   609 |      P_buf[(long long) (nrow_get * 2)] = P_mine[$$CIV10];
   610 |      P_buf[(long long) (nrow_get * 2 + 1)] = (int) $$CIV10;
   611 |      nrow_get = nrow_get + 1;
   612 |    lab_158:
   606 |      $$CIV10 = $$CIV10 + 1ll;
            } while ((unsigned long long) $$CIV10 < (unsigned long long) ((long long) nrow));    /* ~157 */
          lab_159:
          lab_156:
   614 |    $$csx3 = nrow_get * (ncol_fw + ncol_bw);
   618 |    P_buf[(long long) (nrow_get * 2 + numPes)] = nrow_get;
   619 |    CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Allgather");
            __es.__c4@3 = 1u;
            CTF_Timer::start()(&__t)
            PMPI_Allgather(((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),1,1275069445,((char *)P_buf  + (long long) (nrow_get * 2) * 4ll),1,1275069445,cdt.cm@0);
            CTF_Timer::stop()(&__t)
            __es.__c4@3 = 0u;
            CTF_Timer::~CTF_Timer()(&__t);
   626 |    if (!(0 < numPes)) goto lab_11;
            $$CIV14 = 0ll;
            if (!(lda_A == 1)) goto lab_171;
            do {   /* id=2 guarded */ /* ~9 */ 
              /* region = 139 */
              /* bump-normalized */
   627 |      if (!(myRank == (int) $$CIV14)) goto lab_12;
   628 |      P_recv = P_buf;
              goto lab_14;
            lab_12:
   630 |      P_recv = ((char *)P_buf  + ((long long) numPes * 12ll + (long long) (nrow_get * 2) * 4ll));
            lab_14:
   632 |      $$csx4 = ((int *)(((char *)P_buf  + (long long) (nrow_get * 2) * 4ll)))[$$CIV14];
              if (!($$csx4 > 0)) goto lab_15;
   631 |      nrow_recv = ((int *)(((char *)P_buf  + (long long) (nrow_get * 2) * 4ll)))[$$CIV14];
   633 |      P_send = ((char *)P_buf  + ((long long) ($$csx4 * 2) + ((long long) numPes * 3ll + (long long) (nrow_get * 2))) * 4ll);
   634 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Bcast");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Bcast(P_recv,nrow_recv * 2,1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   635 |      nrow_mine = 0;
   636 |      $$CIV11 = 0ll;
              do {   /* id=5 guarded */ /* ~20 */ 
                /* region = 138 */
                /* bump-normalized */
   639 |        $$csx5 = P_recv[$$CIV11 * 2ll];
                if (!($$csx5 % (b * numPes) >= b * myRank)) goto lab_23;
                if (!($$csx5 % (b * numPes) < (myRank + 1) * b)) goto lab_23;
   638 |        row_mod = $$csx5 % (b * numPes);
   640 |        row_blk = $$csx5 / (b * numPes);
   642 |        $$PARM.A4 = ((char *)A_bw  + ((long long) ((b * ($$csx5 / (b * numPes)) + $$csx5 % (b * numPes)) - b * myRank) * 8ll - (long long) idx_off * 8ll));
   464 |        __builtin_memcpy(((char *)buffer  + ((long long) $$csx3 + (long long) ((ncol_fw + ncol_bw) * nrow_mine)) * 8ll),$$PARM.A4,(unsigned long long) ncol_bw * 8ull);
                __builtin_memcpy(((char *)buffer  + ((long long) ((ncol_fw + ncol_bw) * nrow_mine) + ((long long) ncol_bw + (long long) $$csx3)) * 8ll),((char *)A_fw  + ((long long) ((b * row_blk + row_mod) - b * myRank) * 8ll - (long long) idx_off * 8ll)),(unsigned long long) ncol_fw * 8ull);
   652 |        P_send[(long long) (nrow_mine * 2)] = P_r[(long long) ((b * row_blk + row_mod) - (b * myRank + idx_off))];
   653 |        P_send[(long long) (nrow_mine * 2 + 1)] = P_recv[$$CIV11 * 2ll + 1ll];
   654 |        nrow_mine = nrow_mine + 1;
   655 |      lab_23:
   636 |        $$CIV11 = $$CIV11 + 1ll;
              } while ((unsigned long long) $$CIV11 < (unsigned long long) ((long long) nrow_recv));    /* ~20 */
   663 |      nr2 = nrow_mine * 2;
   664 |      MPI_Gather(&nr2,1,1275069445,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),1,1275069445,(int) $$CIV14,cdt.cm@0);
   666 |      if (!(myRank == (int) $$CIV14)) goto lab_58;
   667 |      ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = 0;
   668 |      if (!(1 < numPes)) goto lab_33;
              $$CIV12 = 0ll;
              do {   /* id=4 guarded */ /* ~31 */ 
                /* region = 136 */
                /* bump-normalized */
   669 |        ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12 + 1ll] = ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12] + ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12];
   668 |        $$CIV12 = $$CIV12 + 1ll;
              } while ((unsigned long long) $$CIV12 < (unsigned long long) ((long long) numPes - 1ll));    /* ~31 */
            lab_33:
   671 |      goto lab_29;
            lab_58:
              CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(P_send,nrow_mine * 2,1275069445,P_buf,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
              goto lab_37;
            lab_29:
   672 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(P_send,nrow_mine * 2,1275069445,P_buf,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   675 |      ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = 0;
   676 |      ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = ((ncol_fw + ncol_bw) * ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[0ll]) / 2;
   677 |      if (!(1 < numPes)) goto lab_41;
              $$CIV13 = 0ll;
              do {   /* id=3 guarded */ /* ~39 */ 
                /* region = 137 */
                /* bump-normalized */
   678 |        ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll] = ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13] + ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13];
   679 |        ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll] = ((ncol_fw + ncol_bw) * ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll]) / 2;
   677 |        $$CIV13 = $$CIV13 + 1ll;
              } while ((unsigned long long) $$CIV13 < (unsigned long long) ((long long) numPes - 1ll));    /* ~39 */
            lab_41:
   681 |    lab_37:
   682 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(((char *)buffer  + (long long) $$csx3 * 8ll),(ncol_fw + ncol_bw) * nrow_mine,1275070475,buffer,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275070475,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   685 |    lab_15:
   626 |      $$CIV14 = $$CIV14 + 1ll;
            } while ((unsigned long long) $$CIV14 < (unsigned long long) ((long long) numPes));    /* ~9 */
            goto lab_172;
          lab_171:
            do {   /* id=24 guarded */ /* ~173 */ 
              /* region = 145 */
              /* bump-normalized */
   627 |      if (!(myRank == (int) $$CIV14)) goto lab_174;
   628 |      P_recv = P_buf;
              goto lab_175;
            lab_174:
   630 |      P_recv = ((char *)P_buf  + ((long long) numPes * 12ll + (long long) (nrow_get * 2) * 4ll));
            lab_175:
   632 |      $$csx6 = ((int *)(((char *)P_buf  + (long long) (nrow_get * 2) * 4ll)))[$$CIV14];
              if (!($$csx6 > 0)) goto lab_193;
   631 |      nrow_recv = ((int *)(((char *)P_buf  + (long long) (nrow_get * 2) * 4ll)))[$$CIV14];
   633 |      P_send = ((char *)P_buf  + ((long long) ($$csx6 * 2) + ((long long) numPes * 3ll + (long long) (nrow_get * 2))) * 4ll);
   634 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Bcast");
              __es.__c4@3 = 2u;
              CTF_Timer::start()(&__t)
              PMPI_Bcast(P_recv,nrow_recv * 2,1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   635 |      nrow_mine = 0;
   636 |      $$CIV11 = 0ll;
              do {   /* id=22 guarded */ /* ~176 */ 
                /* region = 144 */
                /* bump-normalized */
   639 |        $$csx7 = P_recv[$$CIV11 * 2ll];
                if (!($$csx7 % (b * numPes) >= b * myRank)) goto lab_185;
                if (!($$csx7 % (b * numPes) < (myRank + 1) * b)) goto lab_185;
   638 |        row_mod = $$csx7 % (b * numPes);
   640 |        row_blk = $$csx7 / (b * numPes);
   642 |        $$csx9 = b * ($$csx7 / (b * numPes));
                $$csx8 = $$csx9 + $$csx7 % (b * numPes);
                $$PARM.A4 = ((char *)A_bw  + ((long long) ($$csx8 - b * myRank) * 8ll - (long long) idx_off * 8ll));
                $$csxA = (ncol_fw + ncol_bw) * nrow_mine;
   467 |        if (!(0 < ncol_bw)) goto lab_179;
                $$CIV18 = 0ll;
                do {   /* id=19 guarded */ /* ~178 */ 
                  /* region = 140 */
                  /* bump-normalized */
   468 |          __builtin_memcpy(((char *)buffer  + ($$CIV18 + ((long long) $$csx3 + (long long) $$csxA)) * 8ll),((char *)$$PARM.A4  + 8ll * ($$CIV18 * (long long) lda_A)),8ull);
   467 |          $$CIV18 = $$CIV18 + 1ll;
                } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_bw));    /* ~178 */
              lab_179:
                if (!(0 < ncol_fw)) goto lab_183;
                $$CIV18 = 0ll;
                do {   /* id=18 guarded */ /* ~182 */ 
                  /* region = 141 */
                  /* bump-normalized */
   468 |          __builtin_memcpy(((char *)buffer  + ($$CIV18 + ((long long) ncol_bw + ((long long) $$csx3 + (long long) $$csxA))) * 8ll),((char *)A_fw  + ((long long) lda_A * $$CIV18 + ((long long) ($$csx9 + (row_mod - b * myRank)) - (long long) idx_off)) * 8ll),8ull);
   467 |          $$CIV18 = $$CIV18 + 1ll;
                } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_fw));    /* ~182 */
              lab_183:
   652 |        P_send[(long long) (nrow_mine * 2)] = P_r[(long long) ($$csx8 - (b * myRank + idx_off))];
   653 |        P_send[(long long) (nrow_mine * 2 + 1)] = P_recv[$$CIV11 * 2ll + 1ll];
   654 |        nrow_mine = nrow_mine + 1;
   655 |      lab_185:
   636 |        $$CIV11 = $$CIV11 + 1ll;
              } while ((unsigned long long) $$CIV11 < (unsigned long long) ((long long) nrow_recv));    /* ~176 */
   663 |      nr2 = nrow_mine * 2;
   664 |      MPI_Gather(&nr2,1,1275069445,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),1,1275069445,(int) $$CIV14,cdt.cm@0);
   666 |      if (!(myRank == (int) $$CIV14)) goto lab_188;
   667 |      ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = 0;
   668 |      if (!(1 < numPes)) goto lab_187;
              $$CIV12 = 0ll;
              do {   /* id=15 guarded */ /* ~186 */ 
                /* region = 142 */
                /* bump-normalized */
   669 |        ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12 + 1ll] = ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12] + ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV12];
   668 |        $$CIV12 = $$CIV12 + 1ll;
              } while ((unsigned long long) $$CIV12 < (unsigned long long) ((long long) numPes - 1ll));    /* ~186 */
            lab_187:
   671 |      goto lab_189;
            lab_188:
              CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(P_send,nrow_mine * 2,1275069445,P_buf,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
              goto lab_192;
            lab_189:
   672 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 3u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(P_send,nrow_mine * 2,1275069445,P_buf,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275069445,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   675 |      ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = 0;
   676 |      ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[0ll] = ((ncol_fw + ncol_bw) * ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[0ll]) / 2;
   677 |      if (!(1 < numPes)) goto lab_191;
              $$CIV13 = 0ll;
              do {   /* id=10 guarded */ /* ~190 */ 
                /* region = 143 */
                /* bump-normalized */
   678 |        ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll] = ((int *)(((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13] + ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13];
   679 |        ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll] = ((ncol_fw + ncol_bw) * ((int *)(((char *)P_buf  + ((long long) numPes * 4ll + (long long) (nrow_get * 2) * 4ll))))[$$CIV13 + 1ll]) / 2;
   677 |        $$CIV13 = $$CIV13 + 1ll;
              } while ((unsigned long long) $$CIV13 < (unsigned long long) ((long long) numPes - 1ll));    /* ~190 */
            lab_191:
   681 |    lab_192:
   682 |      CTF_Timer::CTF_Timer(char const*)(&__t,"MPI_Gatherv");
              __es.__c4@3 = 4u;
              CTF_Timer::start()(&__t)
              PMPI_Gatherv(((char *)buffer  + (long long) $$csx3 * 8ll),(ncol_fw + ncol_bw) * nrow_mine,1275070475,buffer,((char *)P_buf  + ((long long) numPes + (long long) (nrow_get * 2)) * 4ll),((char *)P_buf  + ((long long) numPes * 8ll + (long long) (nrow_get * 2) * 4ll)),1275070475,(int) $$CIV14,cdt.cm@0);
              CTF_Timer::stop()(&__t)
              __es.__c4@3 = 0u;
              CTF_Timer::~CTF_Timer()(&__t);
   685 |    lab_193:
   626 |      $$CIV14 = $$CIV14 + 1ll;
            } while ((unsigned long long) $$CIV14 < (unsigned long long) ((long long) numPes));    /* ~173 */
          lab_172:
          lab_11:
   687 |    if (!(0 < nrow_get)) goto lab_47;
            if (!(0 < ncol_fw)) goto lab_114;
            if (!(lda_A == 1)) goto lab_90;
            if (!1) goto lab_89;
            $$CIV15 = 0ll;
            do {   /* id=1 guarded */ /* ~45 */ 
              /* region = 146 */
              /* bump-normalized */
   689 |      row_dest = *(P_buf + 4ll / 4 + $$CIV15 * 8ll / 4);
   690 |      P_r[(long long) *(P_buf + 4ll / 4 + $$CIV15 * 8ll / 4)] = *(P_buf + $$CIV15 * 8ll / 4);
   464 |      __builtin_memcpy(((char *)A_bw  + (long long) row_dest * 8ll),((char *)buffer  + 8ll * ($$CIV15 * ((long long) ncol_fw + (long long) ncol_bw))),(unsigned long long) ncol_bw * 8ull);
              __builtin_memcpy(((char *)A_fw  + (long long) row_dest * 8ll),((char *)buffer  + ((long long) ncol_bw + ((long long) ncol_fw + (long long) ncol_bw) * $$CIV15) * 8ll),(unsigned long long) ncol_fw * 8ull);
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~45 */
          lab_89:
            goto lab_115;
          lab_90:
            if (!(0 < ncol_bw)) goto lab_102;
            if (!1) goto lab_101;
            $$CIV15 = 0ll;
            do {   /* id=11 guarded */ /* ~92 */ 
              /* region = 149 */
              /* bump-normalized */
   689 |      row_dest = P_buf[$$CIV15 * 2ll + 1ll];
   690 |      $$csxB = (long long) P_buf[$$CIV15 * 2ll + 1ll];
              P_r[$$csxB] = P_buf[$$CIV15 * 2ll];
   467 |      if (!1) goto lab_95;
              $$CIV18 = 0ll;
              do {   /* id=12 guarded */ /* ~94 */ 
                /* region = 148 */
                /* bump-normalized */
   468 |        __builtin_memcpy(((char *)A_bw  + ($$csxB + (long long) lda_A * $$CIV18) * 8ll),((char *)buffer  + (((long long) ncol_fw + (long long) ncol_bw) * $$CIV15 + $$CIV18) * 8ll),8ull);
   467 |        $$CIV18 = $$CIV18 + 1ll;
              } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_bw));    /* ~94 */
            lab_95:
              if (!1) goto lab_99;
              $$CIV18 = 0ll;
              do {   /* id=13 guarded */ /* ~98 */ 
                /* region = 147 */
                /* bump-normalized */
   468 |        __builtin_memcpy(((char *)A_fw  + ($$csxB + (long long) lda_A * $$CIV18) * 8ll),((char *)buffer  + ($$CIV18 + (((long long) ncol_fw + (long long) ncol_bw) * $$CIV15 + (long long) ncol_bw)) * 8ll),8ull);
   467 |        $$CIV18 = $$CIV18 + 1ll;
              } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_fw));    /* ~98 */
            lab_99:
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~92 */
          lab_101:
            goto lab_115;
          lab_102:
            if (!1) goto lab_113;
            $$CIV15 = 0ll;
            do {   /* id=14 guarded */ /* ~104 */ 
              /* region = 151 */
              /* bump-normalized */
   689 |      row_dest = P_buf[$$CIV15 * 2ll + 1ll];
   690 |      $$csxC = (long long) P_buf[$$CIV15 * 2ll + 1ll];
              P_r[$$csxC] = P_buf[$$CIV15 * 2ll];
   467 |      if (!1) goto lab_111;
              $$CIV18 = 0ll;
              do {   /* id=16 guarded */ /* ~110 */ 
                /* region = 150 */
                /* bump-normalized */
   468 |        __builtin_memcpy(((char *)A_fw  + ($$csxC + (long long) lda_A * $$CIV18) * 8ll),((char *)buffer  + ($$CIV18 + (((long long) ncol_fw + (long long) ncol_bw) * $$CIV15 + (long long) ncol_bw)) * 8ll),8ull);
   467 |        $$CIV18 = $$CIV18 + 1ll;
              } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_fw));    /* ~110 */
            lab_111:
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~104 */
          lab_113:
            goto lab_115;
          lab_114:
            if (!(lda_A == 1)) goto lab_126;
            if (!1) goto lab_125;
            $$CIV15 = 0ll;
            do {   /* id=17 guarded */ /* ~116 */ 
              /* region = 152 */
              /* bump-normalized */
   689 |      row_dest = *(P_buf + 4ll / 4 + $$CIV15 * 8ll / 4);
   690 |      P_r[(long long) *(P_buf + 4ll / 4 + $$CIV15 * 8ll / 4)] = *(P_buf + $$CIV15 * 8ll / 4);
   464 |      __builtin_memcpy(((char *)A_bw  + (long long) row_dest * 8ll),((char *)buffer  + 8ll * ($$CIV15 * ((long long) ncol_fw + (long long) ncol_bw))),(unsigned long long) ncol_bw * 8ull);
              __builtin_memcpy(((char *)A_fw  + (long long) row_dest * 8ll),((char *)buffer  + ((long long) ncol_bw + ((long long) ncol_fw + (long long) ncol_bw) * $$CIV15) * 8ll),(unsigned long long) ncol_fw * 8ull);
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~116 */
          lab_125:
            goto lab_149;
          lab_126:
            if (!(0 < ncol_bw)) goto lab_137;
            if (!1) goto lab_136;
            $$CIV15 = 0ll;
            do {   /* id=20 guarded */ /* ~127 */ 
              /* region = 154 */
              /* bump-normalized */
   689 |      row_dest = P_buf[$$CIV15 * 2ll + 1ll];
   690 |      $$csxD = (long long) P_buf[$$CIV15 * 2ll + 1ll];
              P_r[$$csxD] = P_buf[$$CIV15 * 2ll];
   467 |      if (!1) goto lab_130;
              $$CIV18 = 0ll;
              do {   /* id=21 guarded */ /* ~129 */ 
                /* region = 153 */
                /* bump-normalized */
   468 |        __builtin_memcpy(((char *)A_bw  + ($$csxD + (long long) lda_A * $$CIV18) * 8ll),((char *)buffer  + (((long long) ncol_fw + (long long) ncol_bw) * $$CIV15 + $$CIV18) * 8ll),8ull);
   467 |        $$CIV18 = $$CIV18 + 1ll;
              } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol_bw));    /* ~129 */
            lab_130:
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~127 */
          lab_136:
            goto lab_148;
          lab_137:
            if (!1) goto lab_147;
            $$CIV15 = 0ll;
            do {   /* id=23 guarded */ /* ~138 */ 
              /* region = 155 */
              /* bump-normalized */
   690 |      P_r[(long long) *(P_buf + 4ll / 4 + $$CIV15 * 8ll / 4)] = *(P_buf + $$CIV15 * 8ll / 4);
   687 |      $$CIV15 = $$CIV15 + 1ll;
            } while ((unsigned long long) $$CIV15 < (unsigned long long) ((long long) nrow_get));    /* ~138 */
          lab_147:
          lab_148:
          lab_149:
          lab_115:
          lab_47:
   706 |    return;
          } /* function */ 


   129 |  void void local_tournament<0>(double*, double*, int*, int, int, int)(char * A, long long *R, int *P, int n, int b, int lda_A)
   136 |  {
            guard___func__10 = 1;
   463 |    if (!(lda_A == n)) goto lab_8;
   464 |    __builtin_memcpy(R,A,(unsigned long long) (n * b) * 8ull);
   465 |    goto lab_9;
          lab_8:
   467 |    if (!(0 < b)) goto lab_10;
            $$CIV18 = 0ll;
            do {   /* id=1 guarded */ /* ~11 */ 
              /* region = 34 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)R  + 8ll * ($$CIV18 * (long long) n)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) n * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) b));    /* ~11 */
          lab_10:
   470 |    cdgetrf(int, int, double*, int, int*, int*)(n,b,R,n,P,&info)
            goto lab_13;
          lab_9:
   141 |    cdgetrf(int, int, double*, int, int*, int*)(n,b,R,n,P,&info)
   464 |    __builtin_memcpy(R,A,(unsigned long long) (n * b) * 8ull);
   465 |    goto lab_14;
          lab_13:
   467 |    if (!(0 < b)) goto lab_15;
            $$CIV18 = 0ll;
            do {   /* id=2 guarded */ /* ~16 */ 
              /* region = 35 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)R  + 8ll * ($$CIV18 * (long long) n)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) n * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) b));    /* ~16 */
          lab_15:
   470 |  lab_14:
    24 |    if (!(0 < b)) goto lab_21;
            if (!1) goto lab_30;
            $$CIV1 = 0ll;
            do {   /* id=4 guarded */ /* ~22 */ 
              /* region = 37 */
              /* bump-normalized */
    25 |      if (!1) goto lab_23;
              $$CIV0 = 0ll;
    26 |      $$csxE = P[$$CIV1];
    25 |      do {   /* id=5 guarded */ /* ~24 */ 
                /* region = 36 */
                /* bump-normalized */
    26 |        $$TVX.$$.swp22 = R[((long long) n * $$CIV0 + (long long) $$csxE) - 1ll];
    27 |        R[((long long) n * $$CIV0 + (long long) $$csxE) - 1ll] = R[$$CIV1 + (long long) n * $$CIV0];
    28 |        R[$$CIV1 + (long long) n * $$CIV0] = $$TVX.$$.swp22;
    25 |        $$CIV0 = $$CIV0 + 1ll;
              } while ((unsigned long long) $$CIV0 < (unsigned long long) ((long long) b));    /* ~24 */
            lab_23:
    24 |      $$CIV1 = $$CIV1 + 1ll;
            } while ((unsigned long long) $$CIV1 < (unsigned long long) ((long long) b));    /* ~22 */
          lab_30:
          lab_21:
   151 |    if (!(n > b)) goto lab_2;
   121 |    if (!(1 < b)) goto lab_18;
            $$CIVA = 0ll;
            do {   /* id=3 guarded */ /* ~19 */ 
              /* region = 38 */
              /* bump-normalized */
   122 |      __builtin_memcpy(((char *)R  + (long long) b * ($$CIVA * 8ll + 8ll)),((char *)R  + (long long) n * ($$CIVA * 8ll + 8ll)),(unsigned long long) b * 8ull);
   121 |      $$CIVA = $$CIVA + 1ll;
            } while ((unsigned long long) $$CIVA < (unsigned long long) ((long long) b - 1ll));    /* ~19 */
          lab_18:
   152 |  lab_2:
   161 |    return;
          } /* function */ 


   129 |  void void local_tournament<1>(double*, double*, int*, int, int, int)(char * A, char * R, char * P, int n, int b, int lda_A)
   136 |  {
            guard___func__10 = 1;
   463 |    if (!(lda_A == n)) goto lab_14;
   464 |    __builtin_memcpy(R,A,(unsigned long long) (n * b) * 8ull);
   465 |    goto lab_15;
          lab_14:
   467 |    if (!(0 < b)) goto lab_16;
            $$CIV18 = 0ll;
            do {   /* id=2 guarded */ /* ~17 */ 
              /* region = 17 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)R  + 8ll * ($$CIV18 * (long long) n)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) n * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) b));    /* ~17 */
          lab_16:
   470 |    cdgetrf(int, int, double*, int, int*, int*)(n,b,R,n,P,&info)
            goto lab_9;
          lab_15:
   141 |    cdgetrf(int, int, double*, int, int*, int*)(n,b,R,n,P,&info)
   464 |    __builtin_memcpy(R,A,(unsigned long long) (n * b) * 8ull);
   465 |    goto lab_10;
          lab_9:
   467 |    if (!(0 < b)) goto lab_11;
            $$CIV18 = 0ll;
            do {   /* id=1 guarded */ /* ~12 */ 
              /* region = 18 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)R  + 8ll * ($$CIV18 * (long long) n)),((char *)A  + 8ll * ($$CIV18 * (long long) lda_A)),(unsigned long long) n * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) b));    /* ~12 */
          lab_11:
   470 |  lab_10:
   145 |    __assert_fail("0","tnmt_pvt.cxx",145u,&__func__)
            return;
   161 |  } /* function */ 


   172 |  void coalesce_bwd(double const*, double*, double, int)(char * A1, char * A2, double ordering, int b)
   175 |  {
   177 |    if (!(ordering !=  0.0000000000000000E+000)) goto lab_1;
   178 |    if (!(b - 1 >= 0)) goto lab_5;
            $$CIV16 = 0ll;
            do {   /* id=2 guarded */ /* ~3 */ 
              /* region = 18 */
              /* bump-normalized */
   179 |      $$csxF = (long long) b * ((long long) (b - 1) - $$CIV16);
              __builtin_memcpy(((char *)A2  + ((long long) b + 2ll * $$csxF) * 8ll),((char *)A1  + $$csxF * 8ll),(unsigned long long) b * 8ull);
   180 |      if (!(0 != (int) ((long long) (b - 1) - $$CIV16))) goto lab_6;
              __builtin_memcpy(((char *)A2  + (2ll * $$csxF) * 8ll),((char *)A2  + $$csxF * 8ll),(unsigned long long) b * 8ull);
            lab_6:
   178 |      $$CIV16 = $$CIV16 + 1ll;
            } while ((unsigned long long) $$CIV16 < (unsigned long long) ((long long) (b - 1) + 1ll));    /* ~3 */
          lab_5:
   182 |    goto lab_8;
          lab_1:
   183 |    if (!(b - 1 >= 0)) goto lab_11;
            $$CIV17 = 0ll;
            do {   /* id=1 guarded */ /* ~9 */ 
              /* region = 19 */
              /* bump-normalized */
   184 |      __builtin_memcpy(((char *)A2  + ((long long) b + 2ll * (((long long) (b - 1) - $$CIV17) * (long long) b)) * 8ll),((char *)A2  + ((long long) b * ((long long) (b - 1) - $$CIV17)) * 8ll),(unsigned long long) b * 8ull);
   185 |      __builtin_memcpy(((char *)A2  + (2ll * (((long long) (b - 1) - $$CIV17) * (long long) b)) * 8ll),((char *)A1  + ((long long) b * ((long long) (b - 1) - $$CIV17)) * 8ll),(unsigned long long) b * 8ull);
   183 |      $$CIV17 = $$CIV17 + 1ll;
            } while ((unsigned long long) $$CIV17 < (unsigned long long) ((long long) (b - 1) + 1ll));    /* ~9 */
          lab_11:
   187 |  lab_8:
   188 |    return;
          } /* function */ 


   460 |  void void lda_cpy<double>(int, int, int, int, double const*, double*)(int nrow, int ncol, int lda_A, int lda_B, char * A, char * B)
   462 |  {
   463 |    if (!(lda_A == nrow)) goto lab_1;
            if (!(lda_B == nrow)) goto lab_1;
   464 |    __builtin_memcpy(B,A,(unsigned long long) (nrow * ncol) * 8ull);
   465 |    goto lab_4;
          lab_1:
   467 |    if (!(0 < ncol)) goto lab_7;
            $$CIV18 = 0ll;
            do {   /* id=1 guarded */ /* ~5 */ 
              /* region = 13 */
              /* bump-normalized */
   468 |      __builtin_memcpy(((char *)B  + ((long long) lda_B * $$CIV18) * 8ll),((char *)A  + ((long long) lda_A * $$CIV18) * 8ll),(unsigned long long) nrow * 8ull);
   467 |      $$CIV18 = $$CIV18 + 1ll;
            } while ((unsigned long long) $$CIV18 < (unsigned long long) ((long long) ncol));    /* ~5 */
          lab_7:
   470 |  lab_4:
   471 |    return;
          } /* function */ 


          void __sinit65535()()
          {
    72 |    std::ios_base::Init::Init()(&__ioinit);
            __cxa_atexit(&__srterm__0(),NULL,&__dso_handle);
            return;
          } /* function */ 


          void __srterm__0()()
          {
    72 |    std::ios_base::Init::~Init()(&__ioinit);
            return;
          } /* function */ 


